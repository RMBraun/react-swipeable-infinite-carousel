{"version":3,"file":"index.es.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/components/Carousel.jsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","/* eslint-disable react/prop-types */\nimport React, { useState, useMemo, useRef, useCallback, useEffect, useLayoutEffect, memo } from 'react'\nimport styles from './Carousel.module.css'\n\nconst getClientXOffset = (e) => e?.touches?.[0]?.clientX || e?.clientX || 0\n\nconst calculateAnchors = (slideRefs = [], gridGap = 0) =>\n  slideRefs.reduce((acc, ref, i) => {\n    if (ref?.current) {\n      const width = ref.current.clientWidth\n      const start = i === 0 ? 0 : acc[i - 1].end + gridGap\n      const end = start + width\n      acc.push({ start, end, width })\n    }\n    return acc\n  }, [])\n\nconst calcMinWidth = (slideAnchors, count) =>\n  slideAnchors?.length && count && count > 0\n    ? slideAnchors.reduce((acc, { start }, i) => {\n        const groupWidth = slideAnchors[Math.min(i + count - 1, slideAnchors.length - 1)].end - start\n\n        return groupWidth > acc ? groupWidth : acc\n      }, 0)\n    : 0\n\nconst ContainerCss = ({ displayCount, minDisplayCount, slideAnchors }) => {\n  const minWidth = calcMinWidth(slideAnchors, minDisplayCount)\n  const width = calcMinWidth(slideAnchors, displayCount)\n\n  return {\n    minWidth: minWidth ? `${minWidth}px` : 'auto',\n    width: width ? `${width}px` : '100%',\n  }\n}\n\nconst SlidesContainerCss = ({ gridGap, isScrolling, isDragging }) => ({\n  gap: `${gridGap}px`,\n  transition: `transform ${isScrolling || isDragging ? '0ms' : '500ms'}`,\n})\n\n// eslint-disable-next-line no-unused-vars\nconst Arrow = ({ isLeft, isRight, isHidden, scrollBy, arrowProps, arrowIconProps }) => {\n  const arrowClassName = useMemo(\n    () =>\n      `${styles.arrow} ${isLeft ? styles.leftArrow : styles.rightArrow} ${isHidden ? styles.isArrowHidden : ''} ${\n        arrowProps?.className || ''\n      }`,\n    [arrowProps?.className, isLeft, isHidden],\n  )\n\n  const onClick = useCallback(\n    (callback, scrollCount) => (e) => {\n      e.preventDefault()\n      e.stopPropagation()\n\n      if (typeof callback === 'function') {\n        callback(e)\n      }\n\n      scrollBy(scrollCount)\n    },\n    [arrowProps?.onClick, scrollBy, isLeft],\n  )\n\n  const iconClassName = useMemo(\n    () =>\n      `${styles.arrowIcon} ${isLeft ? styles.leftArrowIcon : styles.rightArrowIcon} ${arrowIconProps?.className || ''}`,\n    [arrowIconProps?.className, isLeft],\n  )\n\n  return (\n    <button {...arrowProps} className={arrowClassName} onClick={onClick(arrowProps?.onClick, isLeft ? -1 : 1)}>\n      <span {...arrowIconProps} className={iconClassName} />\n    </button>\n  )\n}\n\n// eslint-disable-next-line no-unused-vars\nconst Indexes = ({ startIndex, endIndex, indexesPerRow, slideAnchors, scrollBy, indexContainerProps, indexProps }) => {\n  const containerRef = useRef()\n  const gap = 5\n  const borderWidth = 2\n  const width = useMemo(() => `calc((100% - ${(indexesPerRow - 1) * gap}px) / ${indexesPerRow})`, [indexesPerRow])\n\n  const containerClassName = useMemo(\n    () => `${styles.indexContainer} ${indexContainerProps?.className || ''}`,\n    [indexContainerProps?.className],\n  )\n\n  const iconClassName = useMemo(() => `${styles.index} ${indexProps?.className || ''}`, [indexProps?.className])\n\n  const onClick = useCallback(\n    (callback, scrollCount) => (e) => {\n      if (typeof callback === 'function') {\n        callback(e)\n      }\n\n      scrollBy(scrollCount)\n    },\n    [indexProps?.onClick, scrollBy, startIndex],\n  )\n\n  return (\n    <div\n      {...indexContainerProps}\n      ref={containerRef}\n      className={containerClassName}\n      style={{ gap: `${gap}px`, ...indexContainerProps?.style }}\n    >\n      {slideAnchors?.map((_, i) => (\n        <button\n          key={i}\n          {...indexProps}\n          className={iconClassName}\n          style={{\n            backgroundColor: i >= startIndex && i <= endIndex ? 'black' : 'transparent',\n            width,\n            borderWidth: `${borderWidth}px`,\n            ...indexProps?.style,\n          }}\n          onClick={onClick(indexProps?.onClick, i - startIndex)}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport const Carousel = ({\n  startIndex = 0,\n  minDisplayCount = 0,\n  displayCount = 0,\n  gridGap = 10,\n  showArrows = true,\n  renderArrows: RenderArrows = Arrow,\n  arrowLeftProps = {},\n  arrowRightProps = {},\n  scrollSpeed = 75,\n  showIndexes = true,\n  indexesPerRow = 0,\n  renderIndexes: RenderIndexes = Indexes,\n  indexContainerProps = {},\n  indexProps = {},\n  style = {},\n  slideContainerStyle = {},\n  slideStyle = {},\n  children,\n}) => {\n  const resizeObserverRef = useRef()\n  const slides = React.Children.toArray(children) || []\n  const slideCount = slides.length\n  const slidesRefs = useMemo(\n    () =>\n      Array(slideCount)\n        .fill(null)\n        .map((_, i) => slidesRefs?.[i] || React.createRef()),\n    [slideCount],\n  )\n  const [slideAnchors, setSlideAnchors] = useState([])\n  const containerRef = useRef(null)\n  const slideContainerRef = useRef(null)\n  const getTranslateOffset = useCallback(\n    (newIndex, newSlideAnchors = slideAnchors) => {\n      const start = newSlideAnchors?.[newIndex]?.start\n      return start != null ? -1 * start : 0\n    },\n\n    [slideAnchors],\n  )\n  const [index, setIndexState] = useState({ left: startIndex, right: startIndex })\n  const indexRef = useRef(index)\n  const setIndex = useCallback(\n    (newIndex) => {\n      indexRef.current = newIndex\n      setIndexState(newIndex)\n    },\n    [setIndexState],\n  )\n  const [maxIndex, setMaxIndex] = useState(slideCount)\n  const [isDragging, setIsDragging] = useState(false)\n  const [isScrolling, setIsScrolling] = useState(false)\n  const isMouseHover = useRef(false)\n\n  const onMouseEnter = useCallback(() => {\n    isMouseHover.current = true\n  }, [])\n\n  const translateOffset = useRef(getTranslateOffset(index.left))\n  const touchStartRef = useRef(0)\n  const touchEndRef = useRef(0)\n  const scrollDebounceId = useRef()\n  const maxScrollX = 0\n  const minScrollX = useMemo(() => {\n    const start = slideAnchors?.[maxIndex]?.start\n\n    return start != null ? -1 * start : 0\n  }, [slideAnchors, slideCount, maxIndex])\n  const showLeftArrow = index.left !== 0\n  const showRightArrow =\n    translateOffset.current != null && containerRef.current != null && slideAnchors?.[slideCount - 1] != null\n      ? -1 * translateOffset.current + containerRef.current.clientWidth < slideAnchors?.[slideCount - 1].end\n      : true\n\n  const getBoundIndex = useCallback(\n    (newIndex, newMaxIndex = maxIndex) => Math.max(0, Math.min(newMaxIndex, newIndex)),\n    [maxIndex],\n  )\n\n  const getScrollIndex = useCallback(\n    (newTranslateOffset, newSlideAnchors = slideAnchors) => {\n      const currentOffset = -1 * newTranslateOffset\n\n      const newIndex = newSlideAnchors.reduce(\n        (acc, { start, end, width }, i) => {\n          acc.left = currentOffset >= start ? (currentOffset >= start + width / 2 ? i + 1 : i) : acc.left\n          acc.right =\n            containerRef.current != null\n              ? currentOffset + containerRef.current.clientWidth >= end\n                ? i\n                : acc.right\n              : slideCount - 1\n\n          return acc\n        },\n        {\n          left: 0,\n          right: 0,\n        },\n      )\n\n      return {\n        left: getBoundIndex(newIndex.left),\n        right: Math.max(Math.min(slideCount - 1, newIndex.right), newIndex.left),\n      }\n    },\n    [slideCount, slideAnchors, getBoundIndex],\n  )\n\n  const setTranslateOffset = useCallback((offset) => {\n    translateOffset.current = offset\n    requestAnimationFrame(() => {\n      if (slideContainerRef.current) {\n        slideContainerRef.current.style.transform = `translate(${offset}px)`\n      }\n    })\n  }, [])\n\n  const onResize = () => {\n    const newSlideAnchors = calculateAnchors(slidesRefs, gridGap)\n    if (newSlideAnchors?.length) {\n      const containerWidth = containerRef.current.clientWidth\n      const lastEnd = newSlideAnchors[newSlideAnchors.length - 1].end\n      const newMaxIndex = getBoundIndex(\n        newSlideAnchors.findIndex(({ start }) => start + containerWidth >= lastEnd),\n        newSlideAnchors.length - 1,\n      )\n      const newLeftIndex = getBoundIndex(indexRef.current.left, newMaxIndex)\n      const newTranslateOffset = getTranslateOffset(newLeftIndex, newSlideAnchors)\n      const newScrollIndex = getScrollIndex(newTranslateOffset, newSlideAnchors)\n\n      setIndex(newScrollIndex)\n      setSlideAnchors(newSlideAnchors)\n      setMaxIndex(newMaxIndex)\n      setTranslateOffset(newTranslateOffset)\n    }\n  }\n\n  useLayoutEffect(() => {\n    if (resizeObserverRef.current) {\n      resizeObserverRef.current.disconnect()\n    }\n\n    resizeObserverRef.current = new ResizeObserver(onResize)\n    slidesRefs.forEach(({ current }) => resizeObserverRef.current.observe(current))\n\n    onResize()\n  }, [slideCount, minDisplayCount, displayCount, gridGap])\n\n  useEffect(() => {\n    window.addEventListener('resize', onResize)\n\n    return () => {\n      if (resizeObserverRef.current) {\n        resizeObserverRef.current.disconnect()\n      }\n\n      window.removeEventListener('resize', onResize)\n    }\n  }, [])\n\n  const onArrowClick = useCallback(\n    (indexOffset) => {\n      const newBoundIndex = getBoundIndex(index.left + indexOffset)\n      const newTranslateOffset = getTranslateOffset(newBoundIndex)\n      const newScrollIndex = getScrollIndex(newTranslateOffset)\n\n      setIndex(newScrollIndex)\n      setTranslateOffset(newTranslateOffset)\n    },\n    [index, slideCount, getTranslateOffset, setIndex, setTranslateOffset, getBoundIndex],\n  )\n\n  const onTouchStart = useCallback(\n    (e) => {\n      if (isScrolling || e.touches?.length > 1) {\n        return\n      }\n\n      setIsDragging(true)\n\n      const xOffset = getClientXOffset(e)\n      touchStartRef.current = xOffset\n      touchEndRef.current = xOffset\n    },\n    [isScrolling, setIsDragging],\n  )\n\n  const onTouchMove = useCallback(\n    (e) => {\n      e.stopPropagation()\n\n      if (!isDragging || isScrolling) {\n        return\n      }\n\n      touchEndRef.current = getClientXOffset(e)\n      const delta = touchStartRef.current - touchEndRef.current\n      touchStartRef.current = touchEndRef.current\n\n      if (delta !== 0) {\n        const newTranslateOffset = translateOffset.current - delta\n        const newScrollIndex = getScrollIndex(newTranslateOffset)\n\n        setIndex(newScrollIndex)\n        setTranslateOffset(newTranslateOffset)\n      }\n    },\n    [slideAnchors, isScrolling, isDragging, index, setTranslateOffset],\n  )\n\n  const onTouchEnd = useCallback(\n    (e) => {\n      if (isScrolling || e.touches?.length > 0) {\n        return\n      }\n\n      setIsDragging(false)\n    },\n    [isScrolling, setIsDragging],\n  )\n\n  const onMouseLeave = useCallback(\n    (e) => {\n      isMouseHover.current = false\n      onTouchEnd(e)\n    },\n    [onTouchEnd],\n  )\n\n  useEffect(() => {\n    if (!isDragging) {\n      const currentOffset = -1 * translateOffset.current\n\n      const newIndex = slideAnchors.reduce((acc, { start, width }, i) => {\n        return currentOffset >= start ? (currentOffset >= start + width / 2 ? i + 1 : i) : acc\n      }, 0)\n\n      const newBoundIndex = getBoundIndex(newIndex)\n      const newTranslateOffset = getTranslateOffset(newBoundIndex)\n      const newScrollIndex = getScrollIndex(newTranslateOffset)\n\n      setIndex(newScrollIndex)\n      setTranslateOffset(newTranslateOffset)\n\n      touchStartRef.current = 0\n      touchEndRef.current = 0\n    }\n  }, [isDragging])\n\n  const onScroll = useCallback(\n    (e) => {\n      if (isDragging) {\n        return\n      }\n\n      const isWheel = isMouseHover.current && e.deltaX === 0 && Math.abs(e.deltaY) > 0\n      const scrollDelta = isWheel ? -1 * e.deltaY : e.deltaX\n      const scrollDirection = Math.sign(scrollDelta)\n\n      if (\n        (translateOffset.current >= maxScrollX && scrollDirection === -1) ||\n        (translateOffset.current <= minScrollX && scrollDirection === 1)\n      ) {\n        return\n      }\n\n      if (!isScrolling && !isWheel) {\n        setIsScrolling(true)\n      }\n\n      const newTranslateOffset =\n        translateOffset.current - scrollDirection * Math.min(scrollSpeed, Math.abs(scrollDelta))\n\n      const newBoundIndex = getScrollIndex(newTranslateOffset)\n\n      if (index.left !== newBoundIndex.left || index.right !== newBoundIndex.right) {\n        setIndex(newBoundIndex)\n      }\n\n      const debounceFunc = () => {\n        if (isScrolling) {\n          setIsScrolling(false)\n          const finalTranslateOffset = getTranslateOffset(newBoundIndex.left)\n          const finalBoundIndex = getScrollIndex(finalTranslateOffset)\n          setIndex(finalBoundIndex)\n          setTranslateOffset(finalTranslateOffset)\n        }\n      }\n\n      if (scrollDebounceId.current) {\n        clearTimeout(scrollDebounceId.current)\n      }\n\n      if (newTranslateOffset >= maxScrollX) {\n        setTranslateOffset(maxScrollX)\n        debounceFunc()\n      } else if (newTranslateOffset <= minScrollX) {\n        setTranslateOffset(minScrollX)\n        debounceFunc()\n      } else {\n        setTranslateOffset(newTranslateOffset)\n\n        scrollDebounceId.current = setTimeout(debounceFunc, 100)\n      }\n    },\n    [\n      index,\n      slideAnchors,\n      scrollSpeed,\n      gridGap,\n      isScrolling,\n      minScrollX,\n      translateOffset,\n      isDragging,\n      setIsScrolling,\n      setIndex,\n      setTranslateOffset,\n    ],\n  )\n\n  const slideContainerCss = useMemo(\n    () =>\n      SlidesContainerCss({\n        gridGap,\n        isScrolling,\n        isDragging,\n      }),\n    [gridGap, isScrolling, isDragging],\n  )\n\n  return (\n    <div\n      className={styles.container}\n      style={{\n        ...ContainerCss({\n          minDisplayCount,\n          displayCount,\n          slideAnchors,\n        }),\n        ...style,\n      }}\n      ref={containerRef}\n    >\n      <div className={styles.slidesAndArrowsContainer}>\n        {showArrows && (\n          <RenderArrows\n            isLeft={true}\n            isRight={false}\n            isHidden={isScrolling || isDragging || !showLeftArrow}\n            scrollBy={onArrowClick}\n            arrowProps={arrowLeftProps}\n          />\n        )}\n        <div\n          ref={slideContainerRef}\n          className={styles.slideContainer}\n          style={{\n            ...slideContainerCss,\n            ...slideContainerStyle,\n          }}\n          onTouchStart={onTouchStart}\n          onTouchMove={onTouchMove}\n          onTouchEnd={onTouchEnd}\n          onTouchCancel={onTouchEnd}\n          onMouseDown={onTouchStart}\n          onMouseMove={onTouchMove}\n          onMouseUp={onTouchEnd}\n          onMouseLeave={onMouseLeave}\n          onMouseEnter={onMouseEnter}\n          onWheel={onScroll}\n        >\n          {slides.map((slide, i) => (\n            <div style={slideStyle} ref={slidesRefs[i]} key={i}>\n              {slide}\n            </div>\n          ))}\n        </div>\n        {showArrows && (\n          <RenderArrows\n            isLeft={false}\n            isRight={true}\n            isHidden={isScrolling || isDragging || !showRightArrow}\n            scrollBy={onArrowClick}\n            arrowProps={arrowRightProps}\n          />\n        )}\n      </div>\n      {showIndexes && (\n        <RenderIndexes\n          startIndex={index.left}\n          endIndex={index.right}\n          indexesPerRow={indexesPerRow || slideCount}\n          slideAnchors={slideAnchors}\n          scrollBy={onArrowClick}\n          indexContainerProps={indexContainerProps}\n          indexProps={indexProps}\n        />\n      )}\n    </div>\n  )\n}\n"],"names":["css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","getClientXOffset","e","touches","clientX","calcMinWidth","slideAnchors","count","length","reduce","acc","start","i","groupWidth","Math","min","end","ContainerCss","displayCount","minDisplayCount","minWidth","width","Arrow","isLeft","isRight","isHidden","scrollBy","arrowProps","arrowIconProps","arrowClassName","useMemo","styles","className","onClick","useCallback","callback","scrollCount","preventDefault","stopPropagation","iconClassName","React","Indexes","startIndex","endIndex","indexesPerRow","indexContainerProps","indexProps","containerRef","useRef","containerClassName","gap","map","_","_extends","key","backgroundColor","borderWidth","Carousel","gridGap","showArrows","renderArrows","RenderArrows","arrowLeftProps","arrowRightProps","scrollSpeed","showIndexes","renderIndexes","RenderIndexes","slideContainerStyle","slideStyle","children","resizeObserverRef","slides","Children","toArray","slideCount","slidesRefs","Array","fill","createRef","setSlideAnchors","useState","slideContainerRef","getTranslateOffset","newIndex","newSlideAnchors","index","setIndexState","left","right","indexRef","setIndex","current","maxIndex","setMaxIndex","isDragging","setIsDragging","isScrolling","setIsScrolling","isMouseHover","onMouseEnter","translateOffset","touchStartRef","touchEndRef","scrollDebounceId","minScrollX","showLeftArrow","showRightArrow","clientWidth","getBoundIndex","newMaxIndex","max","getScrollIndex","newTranslateOffset","currentOffset","setTranslateOffset","offset","requestAnimationFrame","transform","onResize","slideRefs","push","calculateAnchors","containerWidth","lastEnd","findIndex","newLeftIndex","newScrollIndex","useLayoutEffect","disconnect","ResizeObserver","forEach","observe","useEffect","window","addEventListener","removeEventListener","onArrowClick","indexOffset","newBoundIndex","onTouchStart","xOffset","onTouchMove","delta","onTouchEnd","onMouseLeave","onScroll","isWheel","deltaX","abs","deltaY","scrollDelta","scrollDirection","sign","debounceFunc","finalTranslateOffset","finalBoundIndex","clearTimeout","setTimeout","slideContainerCss","transition","SlidesContainerCss","onTouchCancel","onMouseDown","onMouseMove","onMouseUp","onWheel","slide"],"mappings":"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"}