{"version":3,"file":"index.es.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/components/Carousel.jsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","/* eslint-disable react/prop-types */\nimport React, { useState, useMemo, useRef, useCallback, useEffect, useLayoutEffect } from 'react'\nimport styles from './Carousel.module.css'\n\nconst getClientXOffset = (e) => e?.touches?.[0]?.clientX || e?.clientX || 0\n\nconst calculateAnchors = (slideRefs = [], gridGap) =>\n  slideRefs.reduce((acc, ref, i) => {\n    if (ref?.current) {\n      const width = ref.current.clientWidth - gridGap\n      const start = i === 0 ? 0 : acc[i - 1].end + gridGap\n      const end = start + width\n      acc.push({ start, end, width })\n    }\n    return acc\n  }, [])\n\nconst calcMinWidth = (slideAnchors, count) =>\n  slideAnchors?.length && count && count > 0\n    ? slideAnchors.reduce((acc, { start }, i) => {\n        const groupWidth = slideAnchors[Math.min(i + count - 1, slideAnchors.length - 1)].end - start\n\n        return groupWidth > acc ? groupWidth : acc\n      }, 0)\n    : 0\n\nconst ContainerCss = ({ displayCount, minDisplayCount, slideAnchors }) => {\n  const minWidth = calcMinWidth(slideAnchors, minDisplayCount)\n  const width = calcMinWidth(slideAnchors, displayCount)\n\n  return {\n    minWidth: minWidth > 0 ? `${minWidth}px` : 'auto',\n    width: width > 0 ? `${width}px` : '100%',\n  }\n}\n\n// eslint-disable-next-line no-unused-vars\nconst Arrow = ({ isLeft, isRight, isHidden, scrollBy, arrowProps, arrowIconProps }) => {\n  const arrowClassName = useMemo(\n    () =>\n      `${styles.arrow} ${isLeft ? styles.leftArrow : styles.rightArrow} ${isHidden ? styles.isArrowHidden : ''} ${\n        arrowProps?.className || ''\n      }`,\n    [arrowProps?.className, isLeft, isHidden],\n  )\n\n  const onClick = useCallback(\n    (callback, scrollCount) => (e) => {\n      e.preventDefault()\n      e.stopPropagation()\n\n      if (typeof callback === 'function') {\n        callback(e)\n      }\n\n      scrollBy(scrollCount)\n    },\n    [arrowProps?.onClick, scrollBy, isLeft],\n  )\n\n  const iconClassName = useMemo(\n    () =>\n      `${styles.arrowIcon} ${isLeft ? styles.leftArrowIcon : styles.rightArrowIcon} ${arrowIconProps?.className || ''}`,\n    [arrowIconProps?.className, isLeft],\n  )\n\n  return (\n    <button {...arrowProps} className={arrowClassName} onClick={onClick(arrowProps?.onClick, isLeft ? -1 : 1)}>\n      <span {...arrowIconProps} className={iconClassName} />\n    </button>\n  )\n}\n\n// eslint-disable-next-line no-unused-vars\nconst Indexes = ({\n  activeIndexes,\n  startIndex,\n  // eslint-disable-next-line no-unused-vars\n  endIndex,\n  indexesPerRow,\n  slideAnchors,\n  scrollBy,\n  indexContainerProps,\n  indexProps,\n}) => {\n  const containerRef = useRef()\n  const gap = 5\n  const borderWidth = 2\n  const width = useMemo(() => `calc((100% - ${(indexesPerRow - 1) * gap}px) / ${indexesPerRow})`, [indexesPerRow])\n\n  const containerClassName = useMemo(\n    () => `${styles.indexContainer} ${indexContainerProps?.className || ''}`,\n    [indexContainerProps?.className],\n  )\n\n  const iconClassName = useMemo(() => `${styles.index} ${indexProps?.className || ''}`, [indexProps?.className])\n\n  const onClick = useCallback(\n    (callback, scrollCount) => (e) => {\n      if (typeof callback === 'function') {\n        callback(e)\n      }\n\n      scrollBy(scrollCount)\n    },\n    [scrollBy],\n  )\n\n  return (\n    <div\n      {...indexContainerProps}\n      ref={containerRef}\n      className={containerClassName}\n      style={{ gap: `${gap}px`, ...indexContainerProps?.style }}\n    >\n      {slideAnchors?.map((_, i) => (\n        <button\n          key={i}\n          {...indexProps}\n          className={iconClassName}\n          style={{\n            backgroundColor: activeIndexes.includes(i) ? 'black' : 'transparent',\n            width,\n            borderWidth: `${borderWidth}px`,\n            ...indexProps?.style,\n          }}\n          onClick={onClick(indexProps?.onClick, i - startIndex)}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport const Carousel = ({\n  isInfinite = false,\n  startIndex = 0,\n  isScrollable = true,\n  isDraggable = true,\n  hasDragMomentum = true,\n  dragMomentumSpeed = 25,\n  dragMomentumDecay = 0.98,\n  minDisplayCount = 0,\n  displayCount = 0,\n  gridGap = 10,\n  showArrows = true,\n  renderArrows: RenderArrows = Arrow,\n  arrowLeftProps = {},\n  arrowRightProps = {},\n  scrollSpeed = 75,\n  showIndexes = true,\n  indexesPerRow = 0,\n  renderIndexes: RenderIndexes = Indexes,\n  indexContainerProps = {},\n  indexProps = {},\n  style = {},\n  slideContainerStyle = {},\n  slideStyle = {},\n  children,\n}) => {\n  const momentumDebounceId = useRef()\n\n  const transitionDebounceId = useRef()\n\n  const areArrowsLocked = useRef(false)\n\n  const currentDragSpeed = useRef(0)\n\n  const resizeObserverRef = useRef()\n\n  const rawSlides = React.Children.toArray(children) || []\n\n  const [clonesLength, setClonesLength] = useState(isInfinite ? rawSlides.length : 0)\n\n  const slides = useMemo(\n    () =>\n      isInfinite && clonesLength\n        ? [\n            ...rawSlides.slice(rawSlides.length - clonesLength, rawSlides.length),\n            ...rawSlides,\n            ...rawSlides.slice(0, clonesLength),\n          ]\n        : rawSlides,\n    [rawSlides.length, isInfinite, clonesLength],\n  )\n\n  const slideCount = slides.length\n\n  const slidesRefs = useMemo(\n    () =>\n      Array(slideCount)\n        .fill(null)\n        .map((_, i) => slidesRefs?.[i] || React.createRef()),\n    [slideCount],\n  )\n\n  const [slideAnchors, setSlideAnchors] = useState([])\n\n  const coreSlideAnchors = useMemo(\n    () => (isInfinite ? slideAnchors.slice(clonesLength, slideAnchors.length - clonesLength) : slideAnchors),\n    [slideAnchors, slideAnchors.length, isInfinite],\n  )\n\n  const containerRef = useRef(null)\n\n  const slideContainerRef = useRef(null)\n\n  const getTranslateOffset = useCallback(\n    (newIndex, newSlideAnchors = slideAnchors) => {\n      const start = newSlideAnchors?.[newIndex]?.start\n      return start != null ? -1 * start : 0\n    },\n\n    [slideAnchors],\n  )\n\n  const [index, setIndexState] = useState({ left: startIndex + clonesLength, right: startIndex + clonesLength })\n\n  const activeIndexes = useMemo(() => {\n    if (index?.left != null && index?.right != null) {\n      return Array(index.right - index.left + 1)\n        .fill(index.left)\n        .map((_, i) => (index.left + i - clonesLength) % rawSlides.length)\n    } else {\n      return []\n    }\n  }, [index?.left, index?.right, clonesLength])\n\n  const indexRef = useRef(index)\n\n  const [maxIndex, setMaxIndex] = useState(slideCount)\n\n  const [isDragging, setIsDragging] = useState(false)\n\n  const [isScrolling, setIsScrolling] = useState(true)\n\n  const isMomentum = useRef(false)\n\n  const translateOffset = useRef(() => getTranslateOffset(index.left))\n\n  const touchStartRef = useRef(0)\n\n  const touchEndRef = useRef(0)\n\n  const scrollDebounceId = useRef()\n\n  const maxScrollX = 0\n\n  const minScrollX = useMemo(() => {\n    const start = slideAnchors?.[maxIndex]?.start\n\n    return start != null ? -1 * start : 0\n  }, [slideAnchors, slideCount, maxIndex])\n\n  const showLeftArrow = isInfinite || index.left !== 0\n\n  const showRightArrow =\n    isInfinite ||\n    (translateOffset.current != null && containerRef.current != null && slideAnchors?.[slideCount - 1] != null\n      ? -1 * translateOffset.current + containerRef.current.clientWidth < slideAnchors?.[slideCount - 1].end\n      : true)\n\n  const getBoundIndex = useCallback(\n    (newIndex, newMaxIndex = maxIndex) => Math.max(0, Math.min(newMaxIndex, newIndex)),\n    [maxIndex],\n  )\n\n  const getScrollIndex = useCallback(\n    (newTranslateOffset, newSlideAnchors = slideAnchors) => {\n      const currentOffset = -1 * newTranslateOffset\n\n      const newIndex = newSlideAnchors.reduce(\n        (acc, { start, end, width }, i) => {\n          acc.left = currentOffset >= start ? (currentOffset >= start + width / 2 ? i + 1 : i) : acc.left\n          acc.right =\n            containerRef.current != null\n              ? currentOffset + containerRef.current.clientWidth >= end\n                ? i\n                : acc.right\n              : slideCount - 1\n\n          return acc\n        },\n        {\n          left: 0,\n          right: 0,\n        },\n      )\n\n      return {\n        left: getBoundIndex(newIndex.left),\n        right: Math.max(Math.min(slideCount - 1, newIndex.right), newIndex.left),\n      }\n    },\n    [slideCount, slideAnchors, getBoundIndex],\n  )\n\n  const setTranslateOffset = useCallback(\n    ({ offset, index, newSlideAnchors = slideAnchors, newClonesLength = clonesLength }) => {\n      requestAnimationFrame(() => {\n        if (!slideContainerRef.current) {\n          return\n        }\n\n        let boundOffset = offset\n\n        if (isInfinite && newClonesLength && newSlideAnchors.length) {\n          const rightAnchor = newSlideAnchors[newSlideAnchors.length - newClonesLength - 1].end + gridGap\n          const leftAnchor = newSlideAnchors[newClonesLength].start\n\n          if (offset + rightAnchor < 0) {\n            boundOffset = offset + rightAnchor - leftAnchor\n          } else if (offset + leftAnchor > 0) {\n            boundOffset = offset + leftAnchor - rightAnchor\n          }\n        }\n\n        const newIndex = index == null ? getScrollIndex(boundOffset) : index\n\n        if (transitionDebounceId.current) {\n          cancelAnimationFrame(transitionDebounceId.current)\n        }\n\n        if (isScrolling || isDragging) {\n          slideContainerRef.current.style.transitionDuration = '0ms'\n        }\n\n        slideContainerRef.current.style.transform = `translate(${boundOffset}px)`\n\n        transitionDebounceId.current = requestAnimationFrame(() => {\n          slideContainerRef.current.style.transitionDuration = '500ms'\n        })\n\n        translateOffset.current = boundOffset\n        setIndexState(newIndex)\n      })\n    },\n    [\n      gridGap,\n      isScrolling,\n      isDragging,\n      slideAnchors,\n      slideAnchors?.length,\n      clonesLength,\n      getScrollIndex,\n      setIndexState,\n      getScrollIndex,\n    ],\n  )\n\n  const calcClonesLength = (newSlideAnchors) => {\n    if (!isInfinite) {\n      return 0\n    }\n\n    const containerWidth = slideContainerRef.current.clientWidth\n\n    const coreSlideAnchors = isInfinite\n      ? newSlideAnchors.slice(clonesLength, newSlideAnchors.length - clonesLength)\n      : newSlideAnchors\n\n    const leftCount = coreSlideAnchors.reduce(\n      (acc, { width }, i) => {\n        acc.width = acc.width + width\n\n        if (acc.index == null && acc.width > containerWidth) {\n          acc.index = i + 1\n        }\n\n        return acc\n      },\n      {\n        width: 0,\n        index: null,\n      },\n    ).index\n\n    const rightCount = coreSlideAnchors.reduceRight(\n      (acc, { width }, i) => {\n        acc.width = acc.width + width\n\n        if (acc.index == null && acc.width > containerWidth) {\n          acc.index = coreSlideAnchors.length - i\n        }\n\n        return acc\n      },\n      {\n        width: 0,\n        index: null,\n      },\n    ).index\n\n    return Math.max(leftCount, rightCount, 1)\n  }\n\n  const onResize = () => {\n    const newSlideAnchors = calculateAnchors(slidesRefs, gridGap)\n    if (newSlideAnchors?.length) {\n      const containerWidth = slideContainerRef.current.clientWidth\n\n      const newClonesLength = calcClonesLength(newSlideAnchors)\n\n      const lastEnd = newSlideAnchors[newSlideAnchors.length - 1].end\n\n      const newMaxIndex = getBoundIndex(\n        newSlideAnchors.findIndex(({ start }) => start + containerWidth >= lastEnd),\n        newSlideAnchors.length - 1,\n      )\n      const newLeftIndex = getBoundIndex(indexRef.current.left + newClonesLength, newMaxIndex)\n      const newTranslateOffset = getTranslateOffset(newLeftIndex, newSlideAnchors)\n      const newScrollIndex = getScrollIndex(newTranslateOffset, newSlideAnchors)\n\n      setClonesLength(newClonesLength)\n      setIndexState(newScrollIndex)\n      setSlideAnchors(newSlideAnchors)\n      setMaxIndex(newMaxIndex)\n      setTranslateOffset({ offset: newTranslateOffset, index: newScrollIndex })\n    }\n  }\n\n  useLayoutEffect(() => {\n    if (resizeObserverRef.current) {\n      resizeObserverRef.current.disconnect()\n    }\n\n    resizeObserverRef.current = new ResizeObserver(onResize)\n    resizeObserverRef.current.observe(containerRef.current)\n    slidesRefs.forEach(({ current }) => resizeObserverRef.current.observe(current))\n\n    onResize()\n  }, [slideCount, clonesLength, minDisplayCount, displayCount, gridGap, isInfinite])\n\n  useEffect(() => {\n    setIsScrolling(false)\n\n    if (isInfinite) {\n      onResize()\n    }\n  }, [])\n\n  const onArrowClick = useCallback(\n    (indexOffset) => {\n      if (!areArrowsLocked.current) {\n        areArrowsLocked.current = true\n        let newBoundIndex = getBoundIndex(index.left + indexOffset)\n\n        if (isInfinite) {\n          const wrappedIndex =\n            newBoundIndex >= slideAnchors.length - clonesLength\n              ? newBoundIndex - rawSlides.length - 1\n              : newBoundIndex < clonesLength - 1\n              ? rawSlides.length + 1 + newBoundIndex\n              : null\n\n          if (wrappedIndex != null) {\n            slideContainerRef.current.style.transitionDuration = '0ms'\n\n            const wrappedTranslateOffset = -slideAnchors[wrappedIndex].start\n            slideContainerRef.current.style.transform = `translate(${wrappedTranslateOffset}px)`\n\n            translateOffset.current = wrappedTranslateOffset\n            newBoundIndex = getBoundIndex(wrappedIndex + indexOffset)\n          }\n        }\n\n        requestAnimationFrame(() => {\n          slideContainerRef.current.style.transitionDuration = '500ms'\n          requestAnimationFrame(() => {\n            if (newBoundIndex !== index.left) {\n              const newTranslateOffset = getTranslateOffset(newBoundIndex)\n              const newScrollIndex = getScrollIndex(newTranslateOffset)\n              setIndexState(newScrollIndex)\n\n              slideContainerRef.current.addEventListener(\n                'transitionend',\n                () => {\n                  areArrowsLocked.current = false\n                },\n                { once: true },\n              )\n\n              slideContainerRef.current.style.transform = `translate(${newTranslateOffset}px)`\n\n              translateOffset.current = newTranslateOffset\n            } else {\n              areArrowsLocked.current = false\n            }\n          })\n        })\n      }\n    },\n    [\n      slideAnchors,\n      isInfinite,\n      index,\n      slideCount,\n      getScrollIndex,\n      getTranslateOffset,\n      setTranslateOffset,\n      getBoundIndex,\n      setIndexState,\n    ],\n  )\n\n  const onTouchStart = useCallback(\n    (e) => {\n      if (momentumDebounceId.current) {\n        cancelAnimationFrame(momentumDebounceId.current)\n      }\n\n      if (areArrowsLocked.current || !isDraggable || isScrolling || e.touches?.length > 1) {\n        return\n      }\n\n      isMomentum.current = false\n      setIsDragging(true)\n\n      const xOffset = getClientXOffset(e)\n      touchStartRef.current = xOffset\n      touchEndRef.current = xOffset\n    },\n    [isDraggable, isScrolling, setIsDragging],\n  )\n\n  const onTouchMove = useCallback(\n    (e) => {\n      e.stopPropagation()\n\n      if (areArrowsLocked.current || isMomentum.current || !isDraggable || !isDragging || isScrolling) {\n        return\n      }\n\n      touchEndRef.current = getClientXOffset(e)\n      const delta = touchStartRef.current - touchEndRef.current\n      touchStartRef.current = touchEndRef.current\n\n      currentDragSpeed.current = delta\n\n      if (delta !== 0) {\n        setTranslateOffset({ offset: translateOffset.current - delta })\n      }\n    },\n    [isDraggable, isScrolling, isDragging, setTranslateOffset],\n  )\n\n  const onTouchEnd = useCallback(\n    (e) => {\n      if (momentumDebounceId.current) {\n        cancelAnimationFrame(momentumDebounceId.current)\n      }\n\n      if (areArrowsLocked.current || !isDraggable || isScrolling || e.touches?.length > 0) {\n        return\n      }\n\n      if (hasDragMomentum) {\n        isMomentum.current = true\n\n        const momentumFunc = (speed) => {\n          momentumDebounceId.current = requestAnimationFrame(() => {\n            const newTranslateOffset = translateOffset.current - speed\n\n            if (Math.abs(speed) <= 1 || newTranslateOffset >= maxScrollX || newTranslateOffset <= minScrollX) {\n              isMomentum.current = false\n              setIsDragging(false)\n              currentDragSpeed.current = 0\n            } else {\n              setTranslateOffset({ offset: newTranslateOffset })\n              momentumFunc(speed * dragMomentumDecay)\n            }\n          })\n        }\n\n        momentumFunc(\n          currentDragSpeed.current < 0\n            ? Math.max(currentDragSpeed.current, -dragMomentumSpeed)\n            : Math.min(currentDragSpeed.current, dragMomentumSpeed),\n        )\n      } else {\n        setIsDragging(false)\n      }\n    },\n    [\n      hasDragMomentum,\n      dragMomentumSpeed,\n      dragMomentumDecay,\n      minScrollX,\n      maxScrollX,\n      isDraggable,\n      isScrolling,\n      setIsDragging,\n      setTranslateOffset,\n    ],\n  )\n\n  const onScroll = useCallback(\n    (e) => {\n      if (areArrowsLocked.current || !isScrollable || isDragging) {\n        return\n      }\n\n      const isWheel = e.deltaX === 0 && Math.abs(e.deltaY) > 0\n      const scrollDelta = isWheel ? -1 * e.deltaY : e.deltaX\n      const scrollDirection = Math.sign(scrollDelta)\n\n      if (\n        (translateOffset.current >= maxScrollX && scrollDirection === -1) ||\n        (translateOffset.current <= minScrollX && scrollDirection === 1)\n      ) {\n        setIsScrolling(false)\n        return\n      }\n\n      if (!isScrolling) {\n        setIsScrolling(true)\n      }\n\n      const newTranslateOffset =\n        translateOffset.current - scrollDirection * Math.min(scrollSpeed, Math.abs(scrollDelta))\n\n      const debounceFunc = () => {\n        setIsScrolling(false)\n      }\n\n      if (scrollDebounceId.current) {\n        clearTimeout(scrollDebounceId.current)\n      }\n\n      if (!isInfinite && newTranslateOffset >= maxScrollX) {\n        setTranslateOffset({ offset: maxScrollX })\n      } else if (!isInfinite && newTranslateOffset <= minScrollX) {\n        setTranslateOffset({ offset: minScrollX })\n      } else {\n        setTranslateOffset({ offset: newTranslateOffset })\n\n        scrollDebounceId.current = setTimeout(debounceFunc, 100)\n      }\n    },\n    [\n      isInfinite,\n      isScrollable,\n      scrollSpeed,\n      isScrolling,\n      minScrollX,\n      translateOffset,\n      isDragging,\n      setIsScrolling,\n      setTranslateOffset,\n    ],\n  )\n\n  useEffect(() => {\n    if (!areArrowsLocked.current && !(isDraggable && isDragging) && !(isScrollable && isScrolling)) {\n      if (momentumDebounceId.current) {\n        cancelAnimationFrame(momentumDebounceId.current)\n      }\n\n      if (scrollDebounceId.current) {\n        clearTimeout(scrollDebounceId.current)\n      }\n\n      const newTranslateOffset = getTranslateOffset(index.left)\n      setTranslateOffset({ offset: newTranslateOffset })\n\n      touchStartRef.current = 0\n      touchEndRef.current = 0\n    }\n  }, [isDragging, isDraggable, isScrolling, isScrollable])\n\n  const containerCss = useMemo(\n    () =>\n      ContainerCss({\n        minDisplayCount,\n        displayCount,\n        slideAnchors,\n      }),\n    [slideAnchors, slideAnchors?.length, minDisplayCount, displayCount],\n  )\n\n  return (\n    <div\n      className={styles.container}\n      style={{\n        ...containerCss,\n        ...style,\n      }}\n      ref={containerRef}\n    >\n      <div className={styles.slidesAndArrowsContainer} onMouseLeave={onTouchEnd}>\n        {showArrows && (\n          <RenderArrows\n            isLeft={true}\n            isRight={false}\n            isHidden={isScrolling || isDragging || !showLeftArrow}\n            scrollBy={onArrowClick}\n            arrowProps={arrowLeftProps}\n          />\n        )}\n        <div\n          ref={slideContainerRef}\n          className={styles.slideContainer}\n          style={slideContainerStyle}\n          onTouchStart={onTouchStart}\n          onTouchMove={onTouchMove}\n          onTouchEnd={onTouchEnd}\n          onTouchCancel={onTouchEnd}\n          onMouseDown={onTouchStart}\n          onMouseMove={onTouchMove}\n          onMouseUp={onTouchEnd}\n          onWheel={onScroll}\n        >\n          {slides.map((slide, i) => (\n            <div\n              style={{ paddingRight: `${!isInfinite && i === slides.length - 1 ? 0 : gridGap}px`, ...slideStyle }}\n              ref={slidesRefs[i]}\n              key={i}\n            >\n              {slide}\n            </div>\n          ))}\n        </div>\n        {showArrows && (\n          <RenderArrows\n            isLeft={false}\n            isRight={true}\n            isHidden={isScrolling || isDragging || !showRightArrow}\n            scrollBy={onArrowClick}\n            arrowProps={arrowRightProps}\n          />\n        )}\n      </div>\n      {showIndexes && (\n        <RenderIndexes\n          startIndex={index.left - clonesLength}\n          endIndex={index.right - clonesLength}\n          activeIndexes={activeIndexes}\n          indexesPerRow={indexesPerRow || rawSlides.length}\n          slideAnchors={coreSlideAnchors}\n          scrollBy={onArrowClick}\n          indexContainerProps={indexContainerProps}\n          indexProps={indexProps}\n        />\n      )}\n    </div>\n  )\n}\n"],"names":["css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","getClientXOffset","e","touches","clientX","calcMinWidth","slideAnchors","count","length","reduce","acc","start","i","groupWidth","Math","min","end","Arrow","isLeft","isRight","isHidden","scrollBy","arrowProps","arrowIconProps","arrowClassName","useMemo","styles","className","onClick","useCallback","callback","scrollCount","preventDefault","stopPropagation","iconClassName","React","Indexes","activeIndexes","startIndex","endIndex","indexesPerRow","indexContainerProps","indexProps","containerRef","useRef","width","containerClassName","gap","map","_","_extends","key","backgroundColor","includes","borderWidth","Carousel","isInfinite","isScrollable","isDraggable","hasDragMomentum","dragMomentumSpeed","dragMomentumDecay","minDisplayCount","displayCount","gridGap","showArrows","renderArrows","RenderArrows","arrowLeftProps","arrowRightProps","scrollSpeed","showIndexes","renderIndexes","RenderIndexes","slideContainerStyle","slideStyle","children","momentumDebounceId","transitionDebounceId","areArrowsLocked","currentDragSpeed","resizeObserverRef","rawSlides","Children","toArray","clonesLength","setClonesLength","useState","slides","slice","slideCount","slidesRefs","Array","fill","createRef","setSlideAnchors","coreSlideAnchors","slideContainerRef","getTranslateOffset","newIndex","newSlideAnchors","index","setIndexState","left","right","indexRef","maxIndex","setMaxIndex","isDragging","setIsDragging","isScrolling","setIsScrolling","isMomentum","translateOffset","touchStartRef","touchEndRef","scrollDebounceId","minScrollX","showLeftArrow","showRightArrow","current","clientWidth","getBoundIndex","newMaxIndex","max","getScrollIndex","newTranslateOffset","currentOffset","setTranslateOffset","offset","newClonesLength","requestAnimationFrame","boundOffset","rightAnchor","leftAnchor","cancelAnimationFrame","transitionDuration","transform","onResize","slideRefs","push","calculateAnchors","containerWidth","leftCount","rightCount","reduceRight","calcClonesLength","lastEnd","findIndex","newLeftIndex","newScrollIndex","useLayoutEffect","disconnect","ResizeObserver","observe","forEach","useEffect","onArrowClick","indexOffset","newBoundIndex","wrappedIndex","wrappedTranslateOffset","addEventListener","once","onTouchStart","xOffset","onTouchMove","delta","onTouchEnd","momentumFunc","speed","abs","onScroll","scrollDelta","deltaX","deltaY","scrollDirection","sign","debounceFunc","clearTimeout","setTimeout","containerCss","minWidth","ContainerCss","onMouseLeave","onTouchCancel","onMouseDown","onMouseMove","onMouseUp","onWheel","slide","paddingRight"],"mappings":"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"}