{"version":3,"file":"index.es.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/components/Carousel.jsx","../src/components/Arrows.jsx","../src/components/Indexes.jsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","/* eslint-disable react/prop-types */\nimport React, { useState, useMemo, useRef, useCallback, useEffect, useLayoutEffect } from 'react'\nimport styles from './Carousel.module.css'\n\nconst getClientXOffset = (e) => e?.touches?.[0]?.clientX || e?.clientX || 0\n\nconst calculateAnchors = (slideRefs = [], gridGap, isInfinite) =>\n  slideRefs.reduce((acc, ref, i) => {\n    if (ref?.current) {\n      const width = ref.current.clientWidth - (!isInfinite && i === slideRefs.length - 1 ? 0 : gridGap)\n      const start = i === 0 ? 0 : acc[i - 1].end + gridGap\n      const end = start + width\n      acc.push({ start, end, width })\n    }\n    return acc\n  }, [])\n\nconst calcMinWidth = (slideAnchors, count) =>\n  slideAnchors?.length && count && count > 0\n    ? slideAnchors.reduce((acc, { start }, i) => {\n        const groupWidth = slideAnchors[Math.min(i + count - 1, slideAnchors.length - 1)].end - start\n\n        return groupWidth > acc ? groupWidth : acc\n      }, 0)\n    : 0\n\nconst ContainerCss = ({ displayCount, minDisplayCount, slideAnchors }) => {\n  const minWidth = calcMinWidth(slideAnchors, minDisplayCount)\n  const width = calcMinWidth(slideAnchors, displayCount)\n\n  return {\n    minWidth: minWidth > 0 ? `${minWidth}px` : 'auto',\n    width: width > 0 ? `${width}px` : '100%',\n  }\n}\n\nexport const Carousel = ({\n  isInfinite = false,\n  startIndex = 0,\n  isScrollable = true,\n  isDraggable = true,\n  hasDragMomentum = true,\n  dragMomentumSpeed = 25,\n  dragMomentumDecay = 0.98,\n  minDisplayCount = 0,\n  displayCount = 0,\n  gridGap = 10,\n  arrows: RenderArrows,\n  arrowLeftProps = {},\n  arrowRightProps = {},\n  scrollSpeed = 75,\n  scrollCount = 1,\n  shouldScrollByDisplayCount = false,\n  indexesPerRow = 0,\n  indexes: RenderIndexes,\n  indexContainerProps = {},\n  indexProps = {},\n  style = {},\n  slideContainerStyle = {},\n  slideStyle = {},\n  children,\n}) => {\n  const [isHovering, setIsHovering] = useState(false)\n\n  const momentumDebounceId = useRef()\n\n  const transitionDebounceId = useRef()\n\n  const areArrowsLocked = useRef(false)\n\n  const currentDragSpeed = useRef(0)\n\n  const resizeObserverRef = useRef()\n\n  const rawSlides = React.Children.toArray(children) || []\n\n  const [clonesLength, setClonesLength] = useState(isInfinite ? rawSlides.length : 0)\n\n  const slides = useMemo(\n    () =>\n      isInfinite && clonesLength\n        ? [\n            ...rawSlides.slice(rawSlides.length - clonesLength, rawSlides.length),\n            ...rawSlides,\n            ...rawSlides.slice(0, clonesLength),\n          ]\n        : rawSlides,\n    [children, rawSlides.length, isInfinite, clonesLength],\n  )\n\n  const slideCount = slides.length\n\n  const slidesRefs = useMemo(\n    () =>\n      Array(slideCount)\n        .fill(null)\n        .map((_, i) => slidesRefs?.[i] || React.createRef()),\n    [slideCount],\n  )\n\n  const [slideAnchors, setSlideAnchors] = useState([])\n\n  const coreSlideAnchors = useMemo(\n    () => (isInfinite ? slideAnchors.slice(clonesLength, slideAnchors.length - clonesLength) : slideAnchors),\n    [slideAnchors, slideAnchors.length, isInfinite],\n  )\n\n  const containerRef = useRef(null)\n\n  const slideContainerRef = useRef(null)\n\n  const getTranslateOffset = useCallback(\n    (newIndex, newSlideAnchors = slideAnchors) => {\n      const start = newSlideAnchors?.[newIndex]?.start\n      return start != null ? -1 * start : 0\n    },\n\n    [slideAnchors],\n  )\n\n  const [index, setIndexState] = useState({ left: startIndex + clonesLength, right: startIndex + clonesLength })\n\n  const activeIndexes = useMemo(() => {\n    if (index?.left != null && index?.right != null) {\n      return Array(index.right - index.left + 1)\n        .fill(index.left)\n        .map((_, i) => (index.left + i - clonesLength) % rawSlides.length)\n    } else {\n      return []\n    }\n  }, [index?.left, index?.right, clonesLength])\n\n  const indexRef = useRef(index)\n\n  const [maxIndex, setMaxIndex] = useState(slideCount)\n\n  const [isDragging, setIsDragging] = useState(false)\n\n  const [isScrolling, setIsScrolling] = useState(true)\n\n  const isMomentum = useRef(false)\n\n  const translateOffset = useRef(() => getTranslateOffset(index.left))\n\n  const touchStartRef = useRef(0)\n\n  const touchEndRef = useRef(0)\n\n  const scrollDebounceId = useRef()\n\n  const maxScrollX = 0\n\n  const minScrollX = useMemo(() => {\n    const start = slideAnchors?.[maxIndex]?.start\n\n    return start != null ? -1 * start : 0\n  }, [slideAnchors, slideCount, maxIndex])\n\n  const showLeftArrow = isInfinite || index.left !== 0\n\n  const showRightArrow = isInfinite || index.left < maxIndex\n\n  const getBoundIndex = useCallback(\n    (newIndex, newMaxIndex = maxIndex) => Math.max(0, Math.min(newMaxIndex, newIndex)),\n    [maxIndex],\n  )\n\n  const getScrollIndex = useCallback(\n    (newTranslateOffset, newSlideAnchors = slideAnchors) => {\n      const currentOffset = -1 * newTranslateOffset\n\n      const newIndex = newSlideAnchors.reduce(\n        (acc, { start, end, width }, i) => {\n          acc.left = currentOffset >= start ? (currentOffset >= start + width / 2 ? i + 1 : i) : acc.left\n          acc.right =\n            containerRef.current != null\n              ? currentOffset + containerRef.current.clientWidth >= end\n                ? i\n                : acc.right\n              : slideCount - 1\n\n          return acc\n        },\n        {\n          left: 0,\n          right: 0,\n        },\n      )\n\n      return {\n        left: getBoundIndex(newIndex.left),\n        right: Math.max(Math.min(slideCount - 1, newIndex.right), newIndex.left),\n      }\n    },\n    [slideCount, slideAnchors, getBoundIndex],\n  )\n\n  const setTranslateOffset = useCallback(\n    ({ offset, index, newSlideAnchors = slideAnchors, newClonesLength = clonesLength }) => {\n      requestAnimationFrame(() => {\n        if (!slideContainerRef.current) {\n          return\n        }\n\n        let boundOffset = offset\n\n        if (isInfinite && newClonesLength && newSlideAnchors.length) {\n          const rightAnchor = newSlideAnchors[newSlideAnchors.length - newClonesLength - 1].end + gridGap\n          const leftAnchor = newSlideAnchors[newClonesLength].start\n\n          if (offset + rightAnchor < 0) {\n            boundOffset = offset + rightAnchor - leftAnchor\n          } else if (offset + leftAnchor > 0) {\n            boundOffset = offset + leftAnchor - rightAnchor\n          }\n        }\n\n        const newIndex = index == null ? getScrollIndex(boundOffset) : index\n\n        if (transitionDebounceId.current) {\n          cancelAnimationFrame(transitionDebounceId.current)\n        }\n\n        if (isScrolling || isDragging) {\n          slideContainerRef.current.style.transitionDuration = '0ms'\n        }\n\n        slideContainerRef.current.style.transform = `translate(${boundOffset}px)`\n\n        transitionDebounceId.current = requestAnimationFrame(() => {\n          slideContainerRef.current.style.transitionDuration = '500ms'\n        })\n\n        translateOffset.current = boundOffset\n        setIndexState(newIndex)\n      })\n    },\n    [\n      gridGap,\n      isScrolling,\n      isDragging,\n      slideAnchors,\n      slideAnchors?.length,\n      clonesLength,\n      getScrollIndex,\n      setIndexState,\n      getScrollIndex,\n    ],\n  )\n\n  const calcClonesLength = (newSlideAnchors) => {\n    if (!isInfinite) {\n      return 0\n    }\n\n    const containerWidth = slideContainerRef.current.clientWidth\n\n    const coreSlideAnchors = isInfinite\n      ? newSlideAnchors.slice(clonesLength, newSlideAnchors.length - clonesLength)\n      : newSlideAnchors\n\n    const leftCount = coreSlideAnchors.reduce(\n      (acc, { width }, i) => {\n        acc.width = acc.width + width\n\n        if (acc.index == null && acc.width > containerWidth) {\n          acc.index = i + 1\n        }\n\n        return acc\n      },\n      {\n        width: 0,\n        index: null,\n      },\n    ).index\n\n    const rightCount = coreSlideAnchors.reduceRight(\n      (acc, { width }, i) => {\n        acc.width = acc.width + width\n\n        if (acc.index == null && acc.width > containerWidth) {\n          acc.index = coreSlideAnchors.length - i\n        }\n\n        return acc\n      },\n      {\n        width: 0,\n        index: null,\n      },\n    ).index\n\n    return Math.max(leftCount, rightCount, 1)\n  }\n\n  const onResize = () => {\n    const newSlideAnchors = calculateAnchors(slidesRefs, gridGap, isInfinite)\n    if (newSlideAnchors?.length) {\n      const containerWidth = slideContainerRef.current.clientWidth\n\n      const newClonesLength = calcClonesLength(newSlideAnchors)\n\n      const lastEnd = newSlideAnchors[newSlideAnchors.length - 1].end\n\n      const newMaxIndex = getBoundIndex(\n        newSlideAnchors.findIndex(({ start }) => start + containerWidth >= lastEnd),\n        newSlideAnchors.length - 1,\n      )\n      const newLeftIndex = getBoundIndex(indexRef.current.left + newClonesLength, newMaxIndex)\n      const newTranslateOffset = getTranslateOffset(newLeftIndex, newSlideAnchors)\n      const newScrollIndex = getScrollIndex(newTranslateOffset, newSlideAnchors)\n\n      setClonesLength(newClonesLength)\n      setIndexState(newScrollIndex)\n      setSlideAnchors(newSlideAnchors)\n      setMaxIndex(newMaxIndex)\n      setTranslateOffset({ offset: newTranslateOffset, index: newScrollIndex })\n    }\n  }\n\n  useLayoutEffect(() => {\n    if (resizeObserverRef.current) {\n      resizeObserverRef.current.disconnect()\n    }\n\n    resizeObserverRef.current = new ResizeObserver(onResize)\n    resizeObserverRef.current.observe(containerRef.current)\n    slidesRefs.forEach(({ current }) => resizeObserverRef.current.observe(current))\n\n    onResize()\n  }, [slideCount, clonesLength, minDisplayCount, displayCount, gridGap, isInfinite])\n\n  useEffect(() => {\n    setIsScrolling(false)\n\n    if (isInfinite) {\n      onResize()\n    }\n  }, [])\n\n  const onArrowClick = useCallback(\n    (indexOffset) => {\n      if (!areArrowsLocked.current) {\n        areArrowsLocked.current = true\n        let newBoundIndex = getBoundIndex(index.left + indexOffset)\n\n        if (isInfinite) {\n          const wrappedIndex =\n            newBoundIndex >= slideAnchors.length - clonesLength\n              ? newBoundIndex - rawSlides.length - 1\n              : newBoundIndex < clonesLength - 1\n              ? rawSlides.length + 1 + newBoundIndex\n              : null\n\n          if (wrappedIndex != null) {\n            slideContainerRef.current.style.transitionDuration = '0ms'\n\n            const wrappedTranslateOffset = -slideAnchors[wrappedIndex].start\n            slideContainerRef.current.style.transform = `translate(${wrappedTranslateOffset}px)`\n\n            translateOffset.current = wrappedTranslateOffset\n            newBoundIndex = getBoundIndex(wrappedIndex + indexOffset)\n          }\n        }\n\n        requestAnimationFrame(() => {\n          slideContainerRef.current.style.transitionDuration = '500ms'\n\n          if (newBoundIndex !== index.left) {\n            const newTranslateOffset = getTranslateOffset(newBoundIndex)\n            const newScrollIndex = getScrollIndex(newTranslateOffset)\n\n            slideContainerRef.current.addEventListener(\n              'transitionend',\n              () => {\n                areArrowsLocked.current = false\n              },\n              { once: true },\n            )\n\n            requestAnimationFrame(() => {\n              slideContainerRef.current.style.transform = `translate(${newTranslateOffset}px)`\n            })\n\n            translateOffset.current = newTranslateOffset\n\n            setIndexState(newScrollIndex)\n          } else {\n            areArrowsLocked.current = false\n          }\n        })\n      }\n    },\n    [\n      slideAnchors,\n      isInfinite,\n      index,\n      slideCount,\n      clonesLength,\n      getScrollIndex,\n      getTranslateOffset,\n      setTranslateOffset,\n      getBoundIndex,\n      setIndexState,\n    ],\n  )\n\n  const onTouchStart = useCallback(\n    (e) => {\n      if (momentumDebounceId.current) {\n        cancelAnimationFrame(momentumDebounceId.current)\n      }\n\n      if (areArrowsLocked.current || !isDraggable || isScrolling || e.touches?.length > 1) {\n        return\n      }\n\n      isMomentum.current = false\n      setIsDragging(true)\n\n      const xOffset = getClientXOffset(e)\n      touchStartRef.current = xOffset\n      touchEndRef.current = xOffset\n    },\n    [isDraggable, isScrolling, setIsDragging],\n  )\n\n  const onTouchMove = useCallback(\n    (e) => {\n      e.stopPropagation()\n\n      if (areArrowsLocked.current || isMomentum.current || !isDraggable || !isDragging || isScrolling) {\n        return\n      }\n\n      touchEndRef.current = getClientXOffset(e)\n      const delta = touchStartRef.current - touchEndRef.current\n      touchStartRef.current = touchEndRef.current\n\n      currentDragSpeed.current = delta\n\n      if (delta !== 0) {\n        setTranslateOffset({ offset: translateOffset.current - delta })\n      }\n    },\n    [isDraggable, isScrolling, isDragging, setTranslateOffset],\n  )\n\n  const onTouchEnd = useCallback(\n    (e) => {\n      if (momentumDebounceId.current) {\n        cancelAnimationFrame(momentumDebounceId.current)\n      }\n\n      if (areArrowsLocked.current || !isDraggable || isScrolling || e.touches?.length > 0) {\n        return\n      }\n\n      if (hasDragMomentum) {\n        isMomentum.current = true\n\n        const momentumFunc = (speed) => {\n          currentDragSpeed.current = speed\n          momentumDebounceId.current = requestAnimationFrame(() => {\n            const newTranslateOffset = translateOffset.current - speed\n\n            if (Math.abs(speed) <= 1 || newTranslateOffset >= maxScrollX || newTranslateOffset <= minScrollX) {\n              isMomentum.current = false\n              setIsDragging(false)\n              currentDragSpeed.current = 0\n            } else {\n              setTranslateOffset({ offset: newTranslateOffset })\n              momentumFunc(speed * dragMomentumDecay)\n            }\n          })\n        }\n\n        momentumFunc(\n          currentDragSpeed.current < 0\n            ? Math.max(currentDragSpeed.current, -dragMomentumSpeed)\n            : Math.min(currentDragSpeed.current, dragMomentumSpeed),\n        )\n      } else {\n        setIsDragging(false)\n      }\n    },\n    [\n      hasDragMomentum,\n      dragMomentumSpeed,\n      dragMomentumDecay,\n      minScrollX,\n      maxScrollX,\n      isDraggable,\n      isScrolling,\n      setIsDragging,\n      setTranslateOffset,\n    ],\n  )\n\n  const onScroll = useCallback(\n    (e) => {\n      if (areArrowsLocked.current || !isScrollable || isDragging) {\n        return\n      }\n\n      //TODO handle mouse wheel scrolling correctly\n      // const isWheel = e.deltaX === 0 && Math.abs(e.deltaY) > 0\n      const scrollDelta = e.deltaX\n      const scrollDirection = Math.sign(scrollDelta)\n\n      if (\n        (translateOffset.current >= maxScrollX && scrollDirection === -1) ||\n        (translateOffset.current <= minScrollX && scrollDirection === 1)\n      ) {\n        setIsScrolling(false)\n        return\n      }\n\n      if (!isScrolling) {\n        setIsScrolling(true)\n      }\n\n      const newTranslateOffset =\n        translateOffset.current - scrollDirection * Math.min(scrollSpeed, Math.abs(scrollDelta))\n\n      const debounceFunc = () => {\n        setIsScrolling(false)\n      }\n\n      if (scrollDebounceId.current) {\n        clearTimeout(scrollDebounceId.current)\n      }\n\n      if (!isInfinite && newTranslateOffset >= maxScrollX) {\n        setTranslateOffset({ offset: maxScrollX })\n      } else if (!isInfinite && newTranslateOffset <= minScrollX) {\n        setTranslateOffset({ offset: minScrollX })\n      } else {\n        setTranslateOffset({ offset: newTranslateOffset })\n\n        scrollDebounceId.current = setTimeout(debounceFunc, 100)\n      }\n    },\n    [\n      isInfinite,\n      isScrollable,\n      scrollSpeed,\n      isScrolling,\n      minScrollX,\n      translateOffset,\n      isDragging,\n      setIsScrolling,\n      setTranslateOffset,\n    ],\n  )\n\n  const onMouseEnter = useCallback(() => {\n    setIsHovering(true)\n  }, [setIsHovering])\n\n  const onMouseLeave = useCallback(() => {\n    setIsHovering(false)\n  }, [setIsHovering])\n\n  useEffect(() => {\n    if (!areArrowsLocked.current && !(isDraggable && isDragging) && !(isScrollable && isScrolling)) {\n      if (momentumDebounceId.current) {\n        cancelAnimationFrame(momentumDebounceId.current)\n      }\n\n      if (scrollDebounceId.current) {\n        clearTimeout(scrollDebounceId.current)\n      }\n\n      const newTranslateOffset = getTranslateOffset(index.left)\n      setTranslateOffset({ offset: newTranslateOffset })\n\n      touchStartRef.current = 0\n      touchEndRef.current = 0\n    }\n  }, [isDragging, isDraggable, isScrolling, isScrollable])\n\n  const containerCss = useMemo(\n    () =>\n      ContainerCss({\n        minDisplayCount,\n        displayCount,\n        slideAnchors,\n      }),\n    [slideAnchors, slideAnchors?.length, minDisplayCount, displayCount],\n  )\n\n  const arrowScrollCount = useMemo(\n    () => (!isInfinite && shouldScrollByDisplayCount ? activeIndexes.length : scrollCount) || 1,\n    [isInfinite, shouldScrollByDisplayCount, activeIndexes, activeIndexes.length, scrollCount],\n  )\n\n  return (\n    <div\n      className={styles.container}\n      style={{\n        ...containerCss,\n        ...style,\n      }}\n      ref={containerRef}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n    >\n      <div className={styles.slidesAndArrowsContainer} onMouseLeave={onTouchEnd}>\n        {RenderArrows ? (\n          <RenderArrows\n            startIndex={index.left - clonesLength}\n            endIndex={index.right - clonesLength}\n            activeIndexes={activeIndexes}\n            isLeft={true}\n            isRight={false}\n            isHidden={!isHovering || isScrolling || isDragging || !showLeftArrow}\n            scrollBy={onArrowClick}\n            arrowProps={arrowLeftProps}\n            scrollCount={arrowScrollCount}\n          />\n        ) : null}\n        <div\n          ref={slideContainerRef}\n          className={styles.slideContainer}\n          style={slideContainerStyle}\n          onTouchStart={onTouchStart}\n          onTouchMove={onTouchMove}\n          onTouchEnd={onTouchEnd}\n          onTouchCancel={onTouchEnd}\n          onMouseDown={onTouchStart}\n          onMouseMove={onTouchMove}\n          onMouseUp={onTouchEnd}\n          onWheel={onScroll}\n        >\n          {slides.map((slide, i) => (\n            <div\n              style={{ paddingRight: `${!isInfinite && i === slides.length - 1 ? 0 : gridGap}px`, ...slideStyle }}\n              ref={slidesRefs[i]}\n              key={i}\n            >\n              {slide}\n            </div>\n          ))}\n        </div>\n        {RenderArrows ? (\n          <RenderArrows\n            startIndex={index.left - clonesLength}\n            endIndex={index.right - clonesLength}\n            activeIndexes={activeIndexes}\n            isLeft={false}\n            isRight={true}\n            isHidden={!isHovering || isScrolling || isDragging || !showRightArrow}\n            scrollBy={onArrowClick}\n            arrowProps={arrowRightProps}\n            scrollCount={arrowScrollCount}\n          />\n        ) : null}\n      </div>\n      {RenderIndexes ? (\n        <RenderIndexes\n          startIndex={index.left - clonesLength}\n          endIndex={index.right - clonesLength}\n          activeIndexes={activeIndexes}\n          indexesPerRow={indexesPerRow || rawSlides.length}\n          slideAnchors={coreSlideAnchors}\n          scrollBy={onArrowClick}\n          indexContainerProps={indexContainerProps}\n          indexProps={indexProps}\n        />\n      ) : null}\n    </div>\n  )\n}\n","import React, { useCallback, useMemo } from 'react'\nimport styles from './Arrows.module.css'\n\nexport const Arrows = ({ isLeft, isHidden, scrollBy, scrollCount, arrowProps, arrowIconProps }) => {\n  const arrowClassName = useMemo(\n    () =>\n      `${styles.arrow} ${isLeft ? styles.leftArrow : styles.rightArrow} ${isHidden ? styles.isArrowHidden : ''} ${\n        arrowProps?.className || ''\n      }`,\n    [arrowProps?.className, isLeft, isHidden],\n  )\n\n  const onClick = useCallback(\n    (callback, scrollCount) => (e) => {\n      e.preventDefault()\n      e.stopPropagation()\n\n      if (typeof callback === 'function') {\n        callback(e)\n      }\n\n      scrollBy(scrollCount)\n    },\n    [arrowProps?.onClick, scrollBy, isLeft],\n  )\n\n  const iconClassName = useMemo(\n    () =>\n      `${styles.arrowIcon} ${isLeft ? styles.leftArrowIcon : styles.rightArrowIcon} ${arrowIconProps?.className || ''}`,\n    [arrowIconProps?.className, isLeft],\n  )\n\n  return (\n    <button\n      {...arrowProps}\n      className={arrowClassName}\n      onClick={onClick(arrowProps?.onClick, isLeft ? -scrollCount : scrollCount)}\n    >\n      <span {...arrowIconProps} className={iconClassName} />\n    </button>\n  )\n}\n","import React, { useCallback, useMemo, useRef } from 'react'\nimport styles from './Indexes.module.css'\n\nexport const Indexes = ({\n  activeIndexes,\n  startIndex,\n  indexesPerRow,\n  slideAnchors,\n  scrollBy,\n  indexContainerProps,\n  indexProps,\n}) => {\n  const containerRef = useRef()\n  const gap = 5\n  const borderWidth = 2\n  const width = useMemo(() => `calc((100% - ${(indexesPerRow - 1) * gap}px) / ${indexesPerRow})`, [indexesPerRow])\n\n  const containerClassName = useMemo(\n    () => `${styles.indexContainer} ${indexContainerProps?.className || ''}`,\n    [indexContainerProps?.className],\n  )\n\n  const iconClassName = useMemo(() => `${styles.index} ${indexProps?.className || ''}`, [indexProps?.className])\n\n  const onClick = useCallback(\n    (callback, scrollCount) => (e) => {\n      if (typeof callback === 'function') {\n        callback(e)\n      }\n\n      scrollBy(scrollCount)\n    },\n    [scrollBy],\n  )\n\n  return (\n    <div\n      {...indexContainerProps}\n      ref={containerRef}\n      className={containerClassName}\n      style={{ gap: `${gap}px`, ...indexContainerProps?.style }}\n    >\n      {slideAnchors?.map((_, i) => (\n        <button\n          key={i}\n          {...indexProps}\n          className={iconClassName}\n          style={{\n            backgroundColor: activeIndexes.includes(i) ? 'black' : 'transparent',\n            width,\n            borderWidth: `${borderWidth}px`,\n            ...indexProps?.style,\n          }}\n          onClick={onClick(indexProps?.onClick, i - startIndex)}\n        />\n      ))}\n    </div>\n  )\n}\n"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","getClientXOffset","e","touches","clientX","calcMinWidth","slideAnchors","count","length","reduce","acc","start","i","groupWidth","Math","min","end","Carousel","isInfinite","startIndex","isScrollable","isDraggable","hasDragMomentum","dragMomentumSpeed","dragMomentumDecay","minDisplayCount","displayCount","gridGap","arrows","RenderArrows","arrowLeftProps","arrowRightProps","scrollSpeed","scrollCount","shouldScrollByDisplayCount","indexesPerRow","indexes","RenderIndexes","indexContainerProps","indexProps","slideContainerStyle","slideStyle","children","isHovering","setIsHovering","useState","momentumDebounceId","useRef","transitionDebounceId","areArrowsLocked","currentDragSpeed","resizeObserverRef","rawSlides","React","Children","toArray","clonesLength","setClonesLength","slides","useMemo","slice","slideCount","slidesRefs","Array","fill","map","_","createRef","setSlideAnchors","coreSlideAnchors","containerRef","slideContainerRef","getTranslateOffset","useCallback","newIndex","newSlideAnchors","index","setIndexState","left","right","activeIndexes","indexRef","maxIndex","setMaxIndex","isDragging","setIsDragging","isScrolling","setIsScrolling","isMomentum","translateOffset","touchStartRef","touchEndRef","scrollDebounceId","minScrollX","showLeftArrow","showRightArrow","getBoundIndex","newMaxIndex","max","getScrollIndex","newTranslateOffset","currentOffset","width","current","clientWidth","setTranslateOffset","offset","newClonesLength","requestAnimationFrame","boundOffset","rightAnchor","leftAnchor","cancelAnimationFrame","transitionDuration","transform","onResize","slideRefs","push","calculateAnchors","containerWidth","leftCount","rightCount","reduceRight","calcClonesLength","lastEnd","findIndex","newLeftIndex","newScrollIndex","useLayoutEffect","disconnect","ResizeObserver","observe","forEach","useEffect","onArrowClick","indexOffset","newBoundIndex","wrappedIndex","wrappedTranslateOffset","addEventListener","once","onTouchStart","xOffset","onTouchMove","stopPropagation","delta","onTouchEnd","momentumFunc","speed","abs","onScroll","scrollDelta","deltaX","scrollDirection","sign","debounceFunc","clearTimeout","setTimeout","onMouseEnter","onMouseLeave","containerCss","minWidth","ContainerCss","arrowScrollCount","className","styles","endIndex","isLeft","isRight","isHidden","scrollBy","arrowProps","onTouchCancel","onMouseDown","onMouseMove","onMouseUp","onWheel","slide","paddingRight","key","Arrows","arrowIconProps","arrowClassName","onClick","callback","preventDefault","iconClassName","Indexes","containerClassName","gap","_extends","backgroundColor","includes","borderWidth"],"mappings":"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"}