{"version":3,"file":"index.es.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/components/Carousel.jsx","../src/components/Arrows.jsx","../src/components/Indexes.jsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","/* eslint-disable react/prop-types */\nimport React, { useState, useMemo, useRef, useCallback, useEffect, useLayoutEffect } from 'react'\nimport styles from './Carousel.module.css'\n\nconst getClientXOffset = (e) => e?.touches?.[0]?.clientX || e?.clientX || 0\n\nconst calculateAnchors = (slideRefs = [], gridGap, isInfinite) =>\n  slideRefs.reduce((acc, ref, i) => {\n    if (ref?.current) {\n      const width = ref.current.clientWidth - (!isInfinite && i === slideRefs.length - 1 ? 0 : gridGap)\n      const start = i === 0 ? 0 : acc[i - 1].end + gridGap\n      const end = start + width\n      acc.push({ start, end, width })\n    }\n    return acc\n  }, [])\n\nconst calcMinWidth = (slideAnchors, count) =>\n  slideAnchors?.length && count && count > 0\n    ? slideAnchors.reduce((acc, { start }, i) => {\n        const groupWidth = slideAnchors[Math.min(i + count - 1, slideAnchors.length - 1)].end - start\n\n        return groupWidth > acc ? groupWidth : acc\n      }, 0)\n    : 0\n\nconst ContainerCss = ({ displayCount, minDisplayCount, slideAnchors }) => {\n  const minWidth = calcMinWidth(slideAnchors, minDisplayCount)\n  const width = calcMinWidth(slideAnchors, displayCount)\n\n  return {\n    minWidth: minWidth > 0 ? `${minWidth}px` : 'auto',\n    width: width > 0 ? `${width}px` : '100%',\n  }\n}\n\nexport const Carousel = ({\n  isInfinite = false,\n  startIndex = 0,\n  isScrollable = true,\n  isDraggable = true,\n  hasDragMomentum = true,\n  dragMomentumSpeed = 25,\n  dragMomentumDecay = 0.98,\n  minDisplayCount = 0,\n  displayCount = 0,\n  gridGap = 10,\n  arrows: RenderArrows,\n  arrowLeftProps = {},\n  arrowRightProps = {},\n  scrollSpeed = 75,\n  indexesPerRow = 0,\n  indexes: RenderIndexes,\n  indexContainerProps = {},\n  indexProps = {},\n  style = {},\n  slideContainerStyle = {},\n  slideStyle = {},\n  children,\n}) => {\n  const momentumDebounceId = useRef()\n\n  const transitionDebounceId = useRef()\n\n  const areArrowsLocked = useRef(false)\n\n  const currentDragSpeed = useRef(0)\n\n  const resizeObserverRef = useRef()\n\n  const rawSlides = React.Children.toArray(children) || []\n\n  const [clonesLength, setClonesLength] = useState(isInfinite ? rawSlides.length : 0)\n\n  const slides = useMemo(\n    () =>\n      isInfinite && clonesLength\n        ? [\n            ...rawSlides.slice(rawSlides.length - clonesLength, rawSlides.length),\n            ...rawSlides,\n            ...rawSlides.slice(0, clonesLength),\n          ]\n        : rawSlides,\n    [rawSlides.length, isInfinite, clonesLength],\n  )\n\n  const slideCount = slides.length\n\n  const slidesRefs = useMemo(\n    () =>\n      Array(slideCount)\n        .fill(null)\n        .map((_, i) => slidesRefs?.[i] || React.createRef()),\n    [slideCount],\n  )\n\n  const [slideAnchors, setSlideAnchors] = useState([])\n\n  const coreSlideAnchors = useMemo(\n    () => (isInfinite ? slideAnchors.slice(clonesLength, slideAnchors.length - clonesLength) : slideAnchors),\n    [slideAnchors, slideAnchors.length, isInfinite],\n  )\n\n  const containerRef = useRef(null)\n\n  const slideContainerRef = useRef(null)\n\n  const getTranslateOffset = useCallback(\n    (newIndex, newSlideAnchors = slideAnchors) => {\n      const start = newSlideAnchors?.[newIndex]?.start\n      return start != null ? -1 * start : 0\n    },\n\n    [slideAnchors],\n  )\n\n  const [index, setIndexState] = useState({ left: startIndex + clonesLength, right: startIndex + clonesLength })\n\n  const activeIndexes = useMemo(() => {\n    if (index?.left != null && index?.right != null) {\n      return Array(index.right - index.left + 1)\n        .fill(index.left)\n        .map((_, i) => (index.left + i - clonesLength) % rawSlides.length)\n    } else {\n      return []\n    }\n  }, [index?.left, index?.right, clonesLength])\n\n  const indexRef = useRef(index)\n\n  const [maxIndex, setMaxIndex] = useState(slideCount)\n\n  const [isDragging, setIsDragging] = useState(false)\n\n  const [isScrolling, setIsScrolling] = useState(true)\n\n  const isMomentum = useRef(false)\n\n  const translateOffset = useRef(() => getTranslateOffset(index.left))\n\n  const touchStartRef = useRef(0)\n\n  const touchEndRef = useRef(0)\n\n  const scrollDebounceId = useRef()\n\n  const maxScrollX = 0\n\n  const minScrollX = useMemo(() => {\n    const start = slideAnchors?.[maxIndex]?.start\n\n    return start != null ? -1 * start : 0\n  }, [slideAnchors, slideCount, maxIndex])\n\n  const showLeftArrow = isInfinite || index.left !== 0\n\n  const showRightArrow =\n    isInfinite ||\n    (translateOffset.current != null && containerRef.current != null && slideAnchors?.[slideCount - 1] != null\n      ? -1 * translateOffset.current + containerRef.current.clientWidth < slideAnchors?.[slideCount - 1].end\n      : true)\n\n  const getBoundIndex = useCallback(\n    (newIndex, newMaxIndex = maxIndex) => Math.max(0, Math.min(newMaxIndex, newIndex)),\n    [maxIndex],\n  )\n\n  const getScrollIndex = useCallback(\n    (newTranslateOffset, newSlideAnchors = slideAnchors) => {\n      const currentOffset = -1 * newTranslateOffset\n\n      const newIndex = newSlideAnchors.reduce(\n        (acc, { start, end, width }, i) => {\n          acc.left = currentOffset >= start ? (currentOffset >= start + width / 2 ? i + 1 : i) : acc.left\n          acc.right =\n            containerRef.current != null\n              ? currentOffset + containerRef.current.clientWidth >= end\n                ? i\n                : acc.right\n              : slideCount - 1\n\n          return acc\n        },\n        {\n          left: 0,\n          right: 0,\n        },\n      )\n\n      return {\n        left: getBoundIndex(newIndex.left),\n        right: Math.max(Math.min(slideCount - 1, newIndex.right), newIndex.left),\n      }\n    },\n    [slideCount, slideAnchors, getBoundIndex],\n  )\n\n  const setTranslateOffset = useCallback(\n    ({ offset, index, newSlideAnchors = slideAnchors, newClonesLength = clonesLength }) => {\n      requestAnimationFrame(() => {\n        if (!slideContainerRef.current) {\n          return\n        }\n\n        let boundOffset = offset\n\n        if (isInfinite && newClonesLength && newSlideAnchors.length) {\n          const rightAnchor = newSlideAnchors[newSlideAnchors.length - newClonesLength - 1].end + gridGap\n          const leftAnchor = newSlideAnchors[newClonesLength].start\n\n          if (offset + rightAnchor < 0) {\n            boundOffset = offset + rightAnchor - leftAnchor\n          } else if (offset + leftAnchor > 0) {\n            boundOffset = offset + leftAnchor - rightAnchor\n          }\n        }\n\n        const newIndex = index == null ? getScrollIndex(boundOffset) : index\n\n        if (transitionDebounceId.current) {\n          cancelAnimationFrame(transitionDebounceId.current)\n        }\n\n        if (isScrolling || isDragging) {\n          slideContainerRef.current.style.transitionDuration = '0ms'\n        }\n\n        slideContainerRef.current.style.transform = `translate(${boundOffset}px)`\n\n        transitionDebounceId.current = requestAnimationFrame(() => {\n          slideContainerRef.current.style.transitionDuration = '500ms'\n        })\n\n        translateOffset.current = boundOffset\n        setIndexState(newIndex)\n      })\n    },\n    [\n      gridGap,\n      isScrolling,\n      isDragging,\n      slideAnchors,\n      slideAnchors?.length,\n      clonesLength,\n      getScrollIndex,\n      setIndexState,\n      getScrollIndex,\n    ],\n  )\n\n  const calcClonesLength = (newSlideAnchors) => {\n    if (!isInfinite) {\n      return 0\n    }\n\n    const containerWidth = slideContainerRef.current.clientWidth\n\n    const coreSlideAnchors = isInfinite\n      ? newSlideAnchors.slice(clonesLength, newSlideAnchors.length - clonesLength)\n      : newSlideAnchors\n\n    const leftCount = coreSlideAnchors.reduce(\n      (acc, { width }, i) => {\n        acc.width = acc.width + width\n\n        if (acc.index == null && acc.width > containerWidth) {\n          acc.index = i + 1\n        }\n\n        return acc\n      },\n      {\n        width: 0,\n        index: null,\n      },\n    ).index\n\n    const rightCount = coreSlideAnchors.reduceRight(\n      (acc, { width }, i) => {\n        acc.width = acc.width + width\n\n        if (acc.index == null && acc.width > containerWidth) {\n          acc.index = coreSlideAnchors.length - i\n        }\n\n        return acc\n      },\n      {\n        width: 0,\n        index: null,\n      },\n    ).index\n\n    return Math.max(leftCount, rightCount, 1)\n  }\n\n  const onResize = () => {\n    const newSlideAnchors = calculateAnchors(slidesRefs, gridGap, isInfinite)\n    if (newSlideAnchors?.length) {\n      const containerWidth = slideContainerRef.current.clientWidth\n\n      const newClonesLength = calcClonesLength(newSlideAnchors)\n\n      const lastEnd = newSlideAnchors[newSlideAnchors.length - 1].end\n\n      const newMaxIndex = getBoundIndex(\n        newSlideAnchors.findIndex(({ start }) => start + containerWidth >= lastEnd),\n        newSlideAnchors.length - 1,\n      )\n      const newLeftIndex = getBoundIndex(indexRef.current.left + newClonesLength, newMaxIndex)\n      const newTranslateOffset = getTranslateOffset(newLeftIndex, newSlideAnchors)\n      const newScrollIndex = getScrollIndex(newTranslateOffset, newSlideAnchors)\n\n      setClonesLength(newClonesLength)\n      setIndexState(newScrollIndex)\n      setSlideAnchors(newSlideAnchors)\n      setMaxIndex(newMaxIndex)\n      setTranslateOffset({ offset: newTranslateOffset, index: newScrollIndex })\n    }\n  }\n\n  useLayoutEffect(() => {\n    if (resizeObserverRef.current) {\n      resizeObserverRef.current.disconnect()\n    }\n\n    resizeObserverRef.current = new ResizeObserver(onResize)\n    resizeObserverRef.current.observe(containerRef.current)\n    slidesRefs.forEach(({ current }) => resizeObserverRef.current.observe(current))\n\n    onResize()\n  }, [slideCount, clonesLength, minDisplayCount, displayCount, gridGap, isInfinite])\n\n  useEffect(() => {\n    setIsScrolling(false)\n\n    if (isInfinite) {\n      onResize()\n    }\n  }, [])\n\n  const onArrowClick = useCallback(\n    (indexOffset) => {\n      if (!areArrowsLocked.current) {\n        areArrowsLocked.current = true\n        let newBoundIndex = getBoundIndex(index.left + indexOffset)\n\n        if (isInfinite) {\n          const wrappedIndex =\n            newBoundIndex >= slideAnchors.length - clonesLength\n              ? newBoundIndex - rawSlides.length - 1\n              : newBoundIndex < clonesLength - 1\n              ? rawSlides.length + 1 + newBoundIndex\n              : null\n\n          if (wrappedIndex != null) {\n            slideContainerRef.current.style.transitionDuration = '0ms'\n\n            const wrappedTranslateOffset = -slideAnchors[wrappedIndex].start\n            slideContainerRef.current.style.transform = `translate(${wrappedTranslateOffset}px)`\n\n            translateOffset.current = wrappedTranslateOffset\n            newBoundIndex = getBoundIndex(wrappedIndex + indexOffset)\n          }\n        }\n\n        requestAnimationFrame(() => {\n          slideContainerRef.current.style.transitionDuration = '500ms'\n          requestAnimationFrame(() => {\n            if (newBoundIndex !== index.left) {\n              const newTranslateOffset = getTranslateOffset(newBoundIndex)\n              const newScrollIndex = getScrollIndex(newTranslateOffset)\n              setIndexState(newScrollIndex)\n\n              slideContainerRef.current.addEventListener(\n                'transitionend',\n                () => {\n                  areArrowsLocked.current = false\n                },\n                { once: true },\n              )\n\n              slideContainerRef.current.style.transform = `translate(${newTranslateOffset}px)`\n\n              translateOffset.current = newTranslateOffset\n            } else {\n              areArrowsLocked.current = false\n            }\n          })\n        })\n      }\n    },\n    [\n      slideAnchors,\n      isInfinite,\n      index,\n      slideCount,\n      getScrollIndex,\n      getTranslateOffset,\n      setTranslateOffset,\n      getBoundIndex,\n      setIndexState,\n    ],\n  )\n\n  const onTouchStart = useCallback(\n    (e) => {\n      if (momentumDebounceId.current) {\n        cancelAnimationFrame(momentumDebounceId.current)\n      }\n\n      if (areArrowsLocked.current || !isDraggable || isScrolling || e.touches?.length > 1) {\n        return\n      }\n\n      isMomentum.current = false\n      setIsDragging(true)\n\n      const xOffset = getClientXOffset(e)\n      touchStartRef.current = xOffset\n      touchEndRef.current = xOffset\n    },\n    [isDraggable, isScrolling, setIsDragging],\n  )\n\n  const onTouchMove = useCallback(\n    (e) => {\n      e.stopPropagation()\n\n      if (areArrowsLocked.current || isMomentum.current || !isDraggable || !isDragging || isScrolling) {\n        return\n      }\n\n      touchEndRef.current = getClientXOffset(e)\n      const delta = touchStartRef.current - touchEndRef.current\n      touchStartRef.current = touchEndRef.current\n\n      currentDragSpeed.current = delta\n\n      if (delta !== 0) {\n        setTranslateOffset({ offset: translateOffset.current - delta })\n      }\n    },\n    [isDraggable, isScrolling, isDragging, setTranslateOffset],\n  )\n\n  const onTouchEnd = useCallback(\n    (e) => {\n      if (momentumDebounceId.current) {\n        cancelAnimationFrame(momentumDebounceId.current)\n      }\n\n      if (areArrowsLocked.current || !isDraggable || isScrolling || e.touches?.length > 0) {\n        return\n      }\n\n      if (hasDragMomentum) {\n        isMomentum.current = true\n\n        const momentumFunc = (speed) => {\n          currentDragSpeed.current = speed\n          momentumDebounceId.current = requestAnimationFrame(() => {\n            const newTranslateOffset = translateOffset.current - speed\n\n            if (Math.abs(speed) <= 1 || newTranslateOffset >= maxScrollX || newTranslateOffset <= minScrollX) {\n              isMomentum.current = false\n              setIsDragging(false)\n              currentDragSpeed.current = 0\n            } else {\n              setTranslateOffset({ offset: newTranslateOffset })\n              momentumFunc(speed * dragMomentumDecay)\n            }\n          })\n        }\n\n        momentumFunc(\n          currentDragSpeed.current < 0\n            ? Math.max(currentDragSpeed.current, -dragMomentumSpeed)\n            : Math.min(currentDragSpeed.current, dragMomentumSpeed),\n        )\n      } else {\n        setIsDragging(false)\n      }\n    },\n    [\n      hasDragMomentum,\n      dragMomentumSpeed,\n      dragMomentumDecay,\n      minScrollX,\n      maxScrollX,\n      isDraggable,\n      isScrolling,\n      setIsDragging,\n      setTranslateOffset,\n    ],\n  )\n\n  const onScroll = useCallback(\n    (e) => {\n      if (areArrowsLocked.current || !isScrollable || isDragging) {\n        return\n      }\n\n      const isWheel = e.deltaX === 0 && Math.abs(e.deltaY) > 0\n      const scrollDelta = isWheel ? -1 * e.deltaY : e.deltaX\n      const scrollDirection = Math.sign(scrollDelta)\n\n      if (\n        (translateOffset.current >= maxScrollX && scrollDirection === -1) ||\n        (translateOffset.current <= minScrollX && scrollDirection === 1)\n      ) {\n        setIsScrolling(false)\n        return\n      }\n\n      if (!isScrolling) {\n        setIsScrolling(true)\n      }\n\n      const newTranslateOffset =\n        translateOffset.current - scrollDirection * Math.min(scrollSpeed, Math.abs(scrollDelta))\n\n      const debounceFunc = () => {\n        setIsScrolling(false)\n      }\n\n      if (scrollDebounceId.current) {\n        clearTimeout(scrollDebounceId.current)\n      }\n\n      if (!isInfinite && newTranslateOffset >= maxScrollX) {\n        setTranslateOffset({ offset: maxScrollX })\n      } else if (!isInfinite && newTranslateOffset <= minScrollX) {\n        setTranslateOffset({ offset: minScrollX })\n      } else {\n        setTranslateOffset({ offset: newTranslateOffset })\n\n        scrollDebounceId.current = setTimeout(debounceFunc, 100)\n      }\n    },\n    [\n      isInfinite,\n      isScrollable,\n      scrollSpeed,\n      isScrolling,\n      minScrollX,\n      translateOffset,\n      isDragging,\n      setIsScrolling,\n      setTranslateOffset,\n    ],\n  )\n\n  useEffect(() => {\n    if (!areArrowsLocked.current && !(isDraggable && isDragging) && !(isScrollable && isScrolling)) {\n      if (momentumDebounceId.current) {\n        cancelAnimationFrame(momentumDebounceId.current)\n      }\n\n      if (scrollDebounceId.current) {\n        clearTimeout(scrollDebounceId.current)\n      }\n\n      const newTranslateOffset = getTranslateOffset(index.left)\n      setTranslateOffset({ offset: newTranslateOffset })\n\n      touchStartRef.current = 0\n      touchEndRef.current = 0\n    }\n  }, [isDragging, isDraggable, isScrolling, isScrollable])\n\n  const containerCss = useMemo(\n    () =>\n      ContainerCss({\n        minDisplayCount,\n        displayCount,\n        slideAnchors,\n      }),\n    [slideAnchors, slideAnchors?.length, minDisplayCount, displayCount],\n  )\n\n  return (\n    <div\n      className={styles.container}\n      style={{\n        ...containerCss,\n        ...style,\n      }}\n      ref={containerRef}\n    >\n      <div className={styles.slidesAndArrowsContainer} onMouseLeave={onTouchEnd}>\n        {RenderArrows ? (\n          <RenderArrows\n            isLeft={true}\n            isRight={false}\n            isHidden={isScrolling || isDragging || !showLeftArrow}\n            scrollBy={onArrowClick}\n            arrowProps={arrowLeftProps}\n          />\n        ) : null}\n        <div\n          ref={slideContainerRef}\n          className={styles.slideContainer}\n          style={slideContainerStyle}\n          onTouchStart={onTouchStart}\n          onTouchMove={onTouchMove}\n          onTouchEnd={onTouchEnd}\n          onTouchCancel={onTouchEnd}\n          onMouseDown={onTouchStart}\n          onMouseMove={onTouchMove}\n          onMouseUp={onTouchEnd}\n          onWheel={onScroll}\n        >\n          {slides.map((slide, i) => (\n            <div\n              style={{ paddingRight: `${!isInfinite && i === slides.length - 1 ? 0 : gridGap}px`, ...slideStyle }}\n              ref={slidesRefs[i]}\n              key={i}\n            >\n              {slide}\n            </div>\n          ))}\n        </div>\n        {RenderArrows ? (\n          <RenderArrows\n            isLeft={false}\n            isRight={true}\n            isHidden={isScrolling || isDragging || !showRightArrow}\n            scrollBy={onArrowClick}\n            arrowProps={arrowRightProps}\n          />\n        ) : null}\n      </div>\n      {RenderIndexes ? (\n        <RenderIndexes\n          startIndex={index.left - clonesLength}\n          endIndex={index.right - clonesLength}\n          activeIndexes={activeIndexes}\n          indexesPerRow={indexesPerRow || rawSlides.length}\n          slideAnchors={coreSlideAnchors}\n          scrollBy={onArrowClick}\n          indexContainerProps={indexContainerProps}\n          indexProps={indexProps}\n        />\n      ) : null}\n    </div>\n  )\n}\n","import React, { useCallback, useMemo } from 'react'\nimport styles from './Arrows.module.css'\n\nexport const Arrows = ({ isLeft, isHidden, scrollBy, arrowProps, arrowIconProps }) => {\n  const arrowClassName = useMemo(\n    () =>\n      `${styles.arrow} ${isLeft ? styles.leftArrow : styles.rightArrow} ${isHidden ? styles.isArrowHidden : ''} ${\n        arrowProps?.className || ''\n      }`,\n    [arrowProps?.className, isLeft, isHidden],\n  )\n\n  const onClick = useCallback(\n    (callback, scrollCount) => (e) => {\n      e.preventDefault()\n      e.stopPropagation()\n\n      if (typeof callback === 'function') {\n        callback(e)\n      }\n\n      scrollBy(scrollCount)\n    },\n    [arrowProps?.onClick, scrollBy, isLeft],\n  )\n\n  const iconClassName = useMemo(\n    () =>\n      `${styles.arrowIcon} ${isLeft ? styles.leftArrowIcon : styles.rightArrowIcon} ${arrowIconProps?.className || ''}`,\n    [arrowIconProps?.className, isLeft],\n  )\n\n  return (\n    <button {...arrowProps} className={arrowClassName} onClick={onClick(arrowProps?.onClick, isLeft ? -1 : 1)}>\n      <span {...arrowIconProps} className={iconClassName} />\n    </button>\n  )\n}\n","import React, { useCallback, useMemo, useRef } from 'react'\nimport styles from './Indexes.module.css'\n\nexport const Indexes = ({\n  activeIndexes,\n  startIndex,\n  indexesPerRow,\n  slideAnchors,\n  scrollBy,\n  indexContainerProps,\n  indexProps,\n}) => {\n  const containerRef = useRef()\n  const gap = 5\n  const borderWidth = 2\n  const width = useMemo(() => `calc((100% - ${(indexesPerRow - 1) * gap}px) / ${indexesPerRow})`, [indexesPerRow])\n\n  const containerClassName = useMemo(\n    () => `${styles.indexContainer} ${indexContainerProps?.className || ''}`,\n    [indexContainerProps?.className],\n  )\n\n  const iconClassName = useMemo(() => `${styles.index} ${indexProps?.className || ''}`, [indexProps?.className])\n\n  const onClick = useCallback(\n    (callback, scrollCount) => (e) => {\n      if (typeof callback === 'function') {\n        callback(e)\n      }\n\n      scrollBy(scrollCount)\n    },\n    [scrollBy],\n  )\n\n  return (\n    <div\n      {...indexContainerProps}\n      ref={containerRef}\n      className={containerClassName}\n      style={{ gap: `${gap}px`, ...indexContainerProps?.style }}\n    >\n      {slideAnchors?.map((_, i) => (\n        <button\n          key={i}\n          {...indexProps}\n          className={iconClassName}\n          style={{\n            backgroundColor: activeIndexes.includes(i) ? 'black' : 'transparent',\n            width,\n            borderWidth: `${borderWidth}px`,\n            ...indexProps?.style,\n          }}\n          onClick={onClick(indexProps?.onClick, i - startIndex)}\n        />\n      ))}\n    </div>\n  )\n}\n"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","getClientXOffset","e","touches","clientX","calcMinWidth","slideAnchors","count","length","reduce","acc","start","i","groupWidth","Math","min","end","Carousel","isInfinite","startIndex","isScrollable","isDraggable","hasDragMomentum","dragMomentumSpeed","dragMomentumDecay","minDisplayCount","displayCount","gridGap","arrows","RenderArrows","arrowLeftProps","arrowRightProps","scrollSpeed","indexesPerRow","indexes","RenderIndexes","indexContainerProps","indexProps","slideContainerStyle","slideStyle","children","momentumDebounceId","useRef","transitionDebounceId","areArrowsLocked","currentDragSpeed","resizeObserverRef","rawSlides","React","Children","toArray","clonesLength","setClonesLength","useState","slides","useMemo","slice","slideCount","slidesRefs","Array","fill","map","_","createRef","setSlideAnchors","coreSlideAnchors","containerRef","slideContainerRef","getTranslateOffset","useCallback","newIndex","newSlideAnchors","index","setIndexState","left","right","activeIndexes","indexRef","maxIndex","setMaxIndex","isDragging","setIsDragging","isScrolling","setIsScrolling","isMomentum","translateOffset","touchStartRef","touchEndRef","scrollDebounceId","minScrollX","showLeftArrow","showRightArrow","current","clientWidth","getBoundIndex","newMaxIndex","max","getScrollIndex","newTranslateOffset","currentOffset","width","setTranslateOffset","offset","newClonesLength","requestAnimationFrame","boundOffset","rightAnchor","leftAnchor","cancelAnimationFrame","transitionDuration","transform","onResize","slideRefs","push","calculateAnchors","containerWidth","leftCount","rightCount","reduceRight","calcClonesLength","lastEnd","findIndex","newLeftIndex","newScrollIndex","useLayoutEffect","disconnect","ResizeObserver","observe","forEach","useEffect","onArrowClick","indexOffset","newBoundIndex","wrappedIndex","wrappedTranslateOffset","addEventListener","once","onTouchStart","xOffset","onTouchMove","stopPropagation","delta","onTouchEnd","momentumFunc","speed","abs","onScroll","scrollDelta","deltaX","deltaY","scrollDirection","sign","debounceFunc","clearTimeout","setTimeout","containerCss","minWidth","ContainerCss","className","styles","onMouseLeave","isLeft","isRight","isHidden","scrollBy","arrowProps","onTouchCancel","onMouseDown","onMouseMove","onMouseUp","onWheel","slide","paddingRight","key","endIndex","Arrows","arrowIconProps","arrowClassName","onClick","callback","scrollCount","preventDefault","iconClassName","Indexes","containerClassName","gap","_extends","backgroundColor","includes","borderWidth"],"mappings":"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"}