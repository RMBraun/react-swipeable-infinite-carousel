{"version":3,"file":"index.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/components/Carousel.jsx","../src/components/Arrows.jsx","../src/components/Indexes.jsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","/* eslint-disable react/prop-types */\nimport React, { useState, useMemo, useRef, useCallback, useEffect, useLayoutEffect } from 'react'\nimport styles from './Carousel.module.css'\n\nconst getClientXOffset = (e) => e?.touches?.[0]?.clientX || e?.clientX || 0\n\nconst calculateAnchors = (slideRefs = [], gridGap, isInfinite) =>\n  slideRefs.reduce((acc, ref, i) => {\n    if (ref?.current) {\n      const width = ref.current.clientWidth - (!isInfinite && i === slideRefs.length - 1 ? 0 : gridGap)\n      const start = i === 0 ? 0 : acc[i - 1].end + gridGap\n      const end = start + width\n      acc.push({ start, end, width, index: i })\n    }\n    return acc\n  }, [])\n\nconst calcMinWidth = (slideAnchors, count) =>\n  slideAnchors?.length && count && count > 0\n    ? slideAnchors.reduce((acc, { start }, i) => {\n        const groupWidth = slideAnchors[Math.min(i + count - 1, slideAnchors.length - 1)].end - start\n\n        return groupWidth > acc ? groupWidth : acc\n      }, 0)\n    : 0\n\nconst ContainerCss = ({ displayCount, minDisplayCount, slideAnchors }) => {\n  const minWidth = calcMinWidth(slideAnchors, minDisplayCount)\n  const width = calcMinWidth(slideAnchors, displayCount)\n\n  return {\n    minWidth: minWidth > 0 ? `${minWidth}px` : 'auto',\n    width: width > 0 ? `${width}px` : '100%',\n  }\n}\n\nexport const Carousel = ({\n  isInfinite = false,\n  startIndex = 0,\n  isScrollable = true,\n  isDraggable = true,\n  hasDragMomentum = true,\n  dragMomentumSpeed = 25,\n  dragMomentumDecay = 0.98,\n  minDisplayCount = 0,\n  displayCount = 0,\n  gridGap = 10,\n  arrows: RenderArrows,\n  arrowLeftProps = {},\n  arrowRightProps = {},\n  scrollSpeed = 75,\n  scrollCount = 1,\n  shouldScrollByDisplayCount = true,\n  indexesPerRow = 0,\n  indexes: RenderIndexes,\n  indexContainerProps = {},\n  indexProps = {},\n  style = {},\n  slideContainerStyle = {},\n  slideStyle = {},\n  children,\n}) => {\n  const [isHovering, setIsHovering] = useState(false)\n\n  const momentumDebounceId = useRef()\n\n  const transitionDebounceId = useRef()\n\n  const areArrowsLocked = useRef(false)\n\n  const currentDragSpeed = useRef(0)\n\n  const resizeObserverRef = useRef()\n\n  const rawSlides = React.Children.toArray(children) || []\n\n  const [clonesLength, setClonesLength] = useState(isInfinite ? rawSlides.length : 0)\n\n  const slides = useMemo(\n    () =>\n      isInfinite && clonesLength\n        ? [\n            ...rawSlides.slice(rawSlides.length - clonesLength, rawSlides.length),\n            ...rawSlides,\n            ...rawSlides.slice(0, clonesLength),\n          ]\n        : rawSlides,\n    [children, rawSlides.length, isInfinite, clonesLength],\n  )\n\n  const slideCount = slides.length\n\n  const slidesRefs = useMemo(\n    () =>\n      Array(slideCount)\n        .fill(null)\n        .map((_, i) => (typeof slidesRefs !== 'undefined' ? slidesRefs[i] : null) || React.createRef()),\n    [slideCount],\n  )\n\n  const [slideAnchors, setSlideAnchors] = useState([])\n\n  const coreSlideAnchors = useMemo(\n    () => (isInfinite ? slideAnchors.slice(clonesLength, slideAnchors.length - clonesLength) : slideAnchors),\n    [slideAnchors, slideAnchors.length, isInfinite],\n  )\n\n  const minTabIndex = useMemo(\n    () => coreSlideAnchors[0]?.index || clonesLength,\n    [coreSlideAnchors, coreSlideAnchors.length],\n  )\n  const maxTabIndex = useMemo(\n    () => coreSlideAnchors[coreSlideAnchors.length - 1]?.index || clonesLength + rawSlides.length - 1,\n    [coreSlideAnchors, coreSlideAnchors.length],\n  )\n\n  const containerRef = useRef(null)\n\n  const slideContainerRef = useRef(null)\n\n  const slidesOuterContainerRef = useRef(null)\n\n  const getTranslateOffset = useCallback(\n    (newIndex, newSlideAnchors = slideAnchors) => {\n      const start = newSlideAnchors?.[newIndex]?.start\n      return start != null ? -1 * start : 0\n    },\n\n    [slideAnchors],\n  )\n\n  const [index, setIndexState] = useState({ left: startIndex + clonesLength, right: startIndex + clonesLength })\n\n  const activeIndexes = useMemo(() => {\n    if (index?.left != null && index?.right != null) {\n      return Array(index.right - index.left + 1)\n        .fill(index.left)\n        .map((_, i) => (index.left + i - clonesLength) % rawSlides.length)\n    } else {\n      return []\n    }\n  }, [index?.left, index?.right, clonesLength])\n\n  const arrowScrollCount = useMemo(\n    () =>\n      isInfinite ? 1 : shouldScrollByDisplayCount ? activeIndexes.length : Math.min(activeIndexes.length, scrollCount),\n    [isInfinite, shouldScrollByDisplayCount, activeIndexes, activeIndexes.length, scrollCount],\n  )\n\n  const [maxIndex, setMaxIndex] = useState(slideCount - 1)\n\n  const [isDragging, setIsDragging] = useState(false)\n\n  const [isScrolling, setIsScrolling] = useState(true)\n\n  const isMomentum = useRef(false)\n\n  const translateOffset = useRef(() => getTranslateOffset(index.left))\n\n  const touchStartRef = useRef(0)\n\n  const touchEndRef = useRef(0)\n\n  const scrollDebounceId = useRef()\n\n  const maxScrollX = 0\n\n  const minScrollX = useMemo(() => {\n    const start = slideAnchors?.[maxIndex]?.start\n\n    return start != null ? -1 * start : 0\n  }, [slideAnchors, slideCount, maxIndex])\n\n  const showLeftArrow = isInfinite || index.left !== 0\n\n  const showRightArrow = isInfinite || index.left < maxIndex\n\n  const getBoundIndex = useCallback(\n    (newIndex, newMaxIndex = maxIndex) => Math.max(0, Math.min(newMaxIndex, newIndex)),\n    [maxIndex],\n  )\n\n  const getScrollIndex = useCallback(\n    (newTranslateOffset, newSlideAnchors = slideAnchors) => {\n      const currentOffset = -1 * newTranslateOffset\n\n      const newIndex = newSlideAnchors.reduce(\n        (acc, { start, end, width }, i) => {\n          acc.left = currentOffset >= start ? (currentOffset >= start + width / 2 ? i + 1 : i) : acc.left\n          acc.right =\n            containerRef.current != null\n              ? currentOffset + containerRef.current.clientWidth >= end\n                ? i\n                : acc.right\n              : slideCount - 1\n\n          return acc\n        },\n        {\n          left: 0,\n          right: 0,\n        },\n      )\n\n      return {\n        left: getBoundIndex(newIndex.left),\n        right: Math.max(Math.min(slideCount - 1, newIndex.right), newIndex.left),\n      }\n    },\n    [slideCount, slideAnchors, getBoundIndex],\n  )\n\n  const setTranslateOffset = useCallback(\n    ({ offset, index, newSlideAnchors = slideAnchors, newClonesLength = clonesLength }) => {\n      requestAnimationFrame(() => {\n        if (!slideContainerRef.current) {\n          return\n        }\n\n        let boundOffset = offset\n\n        if (isInfinite && newClonesLength && newSlideAnchors.length) {\n          const rightAnchor = newSlideAnchors[newSlideAnchors.length - newClonesLength - 1].end + gridGap\n          const leftAnchor = newSlideAnchors[newClonesLength].start\n\n          if (offset + rightAnchor < 0) {\n            boundOffset = offset + rightAnchor - leftAnchor\n          } else if (offset + leftAnchor > 0) {\n            boundOffset = offset + leftAnchor - rightAnchor\n          }\n        }\n\n        const newIndex = index == null ? getScrollIndex(boundOffset) : index\n\n        if (transitionDebounceId.current) {\n          cancelAnimationFrame(transitionDebounceId.current)\n        }\n\n        if (isScrolling || isDragging) {\n          slideContainerRef.current.style.transitionDuration = '0ms'\n        }\n\n        slideContainerRef.current.style.transform = `translate(${boundOffset}px)`\n\n        transitionDebounceId.current = requestAnimationFrame(() => {\n          slideContainerRef.current.style.transitionDuration = '500ms'\n        })\n\n        translateOffset.current = boundOffset\n        setIndexState(newIndex)\n      })\n    },\n    [\n      gridGap,\n      isScrolling,\n      isDragging,\n      slideAnchors,\n      slideAnchors?.length,\n      clonesLength,\n      getScrollIndex,\n      setIndexState,\n      getScrollIndex,\n    ],\n  )\n\n  const calcClonesLength = (newSlideAnchors) => {\n    if (!isInfinite) {\n      return 0\n    }\n\n    const containerWidth = slideContainerRef.current.clientWidth\n\n    const coreSlideAnchors = isInfinite\n      ? newSlideAnchors.slice(clonesLength, newSlideAnchors.length - clonesLength)\n      : newSlideAnchors\n\n    const leftCount = coreSlideAnchors.reduce(\n      (acc, { width }, i) => {\n        acc.width = acc.width + width\n\n        if (acc.index == null && acc.width > containerWidth) {\n          acc.index = i + 1\n        }\n\n        return acc\n      },\n      {\n        width: 0,\n        index: null,\n      },\n    ).index\n\n    const rightCount = coreSlideAnchors.reduceRight(\n      (acc, { width }, i) => {\n        acc.width = acc.width + width\n\n        if (acc.index == null && acc.width > containerWidth) {\n          acc.index = coreSlideAnchors.length - i\n        }\n\n        return acc\n      },\n      {\n        width: 0,\n        index: null,\n      },\n    ).index\n\n    return Math.max(leftCount, rightCount, 1)\n  }\n\n  const onResize = () => {\n    const newSlideAnchors = calculateAnchors(slidesRefs, gridGap, isInfinite)\n    if (newSlideAnchors?.length) {\n      const containerWidth = slideContainerRef.current.clientWidth\n\n      const newClonesLength = calcClonesLength(newSlideAnchors)\n\n      const lastEnd = newSlideAnchors[newSlideAnchors.length - 1].end\n\n      const newMaxIndex = getBoundIndex(\n        newSlideAnchors.findIndex(({ start }) => start + containerWidth >= lastEnd),\n        newSlideAnchors.length - 1,\n      )\n\n      const newLeftIndex = getBoundIndex(index.left - clonesLength + newClonesLength, newMaxIndex)\n      const newTranslateOffset = getTranslateOffset(newLeftIndex, newSlideAnchors)\n      const newScrollIndex = getScrollIndex(newTranslateOffset, newSlideAnchors)\n\n      setClonesLength(newClonesLength)\n      setIndexState(newScrollIndex)\n      setSlideAnchors(newSlideAnchors)\n      setMaxIndex(newMaxIndex)\n      setTranslateOffset({ offset: newTranslateOffset, index: newScrollIndex })\n    }\n  }\n\n  useLayoutEffect(() => {\n    if (resizeObserverRef.current) {\n      resizeObserverRef.current.disconnect()\n    }\n\n    resizeObserverRef.current = new ResizeObserver(() => onResize())\n    resizeObserverRef.current.observe(containerRef.current)\n    slidesRefs.forEach(({ current }) => resizeObserverRef.current.observe(current))\n\n    onResize()\n  }, [slideCount, clonesLength, minDisplayCount, displayCount, gridGap, isInfinite])\n\n  useEffect(() => {\n    setIsScrolling(false)\n\n    if (isInfinite) {\n      onResize()\n    }\n  }, [])\n\n  const onArrowClick = useCallback(\n    (indexOffset, callback, transitionDuration = '500ms') => {\n      if (!areArrowsLocked.current) {\n        areArrowsLocked.current = true\n\n        const boundIndexOffset = Math.min(arrowScrollCount, indexOffset)\n        let newBoundIndex = isInfinite ? index.left + boundIndexOffset : getBoundIndex(index.left + boundIndexOffset)\n\n        if (isInfinite) {\n          const wrappedIndex =\n            newBoundIndex > slideAnchors.length - clonesLength - 1\n              ? newBoundIndex - rawSlides.length - arrowScrollCount\n              : newBoundIndex < clonesLength - 1\n              ? rawSlides.length + arrowScrollCount + newBoundIndex\n              : null\n\n          if (wrappedIndex != null) {\n            slideContainerRef.current.style.transitionDuration = '0ms'\n\n            const wrappedTranslateOffset = -slideAnchors[wrappedIndex].start\n            slideContainerRef.current.style.transform = `translate(${wrappedTranslateOffset}px)`\n\n            translateOffset.current = wrappedTranslateOffset\n            newBoundIndex = getBoundIndex(wrappedIndex + indexOffset)\n          }\n        }\n\n        requestAnimationFrame(() => {\n          slideContainerRef.current.style.transitionDuration = transitionDuration\n\n          if (newBoundIndex !== index.left) {\n            const newTranslateOffset = getTranslateOffset(newBoundIndex)\n            const newScrollIndex = getScrollIndex(newTranslateOffset)\n\n            slideContainerRef.current.addEventListener(\n              'transitionend',\n              () => {\n                slidesRefs[newScrollIndex.left]?.current?.firstChild?.focus()\n                areArrowsLocked.current = false\n              },\n              { once: true },\n            )\n\n            requestAnimationFrame(() => {\n              slideContainerRef.current.style.transform = `translate(${newTranslateOffset}px)`\n            })\n\n            translateOffset.current = newTranslateOffset\n\n            setIndexState(newScrollIndex)\n\n            callback?.(newScrollIndex)\n          } else {\n            areArrowsLocked.current = false\n          }\n        })\n      }\n    },\n    [\n      slideAnchors,\n      isInfinite,\n      index,\n      slideCount,\n      clonesLength,\n      getScrollIndex,\n      getTranslateOffset,\n      setTranslateOffset,\n      getBoundIndex,\n      setIndexState,\n    ],\n  )\n\n  const onTouchStart = useCallback(\n    (e) => {\n      if (momentumDebounceId.current) {\n        cancelAnimationFrame(momentumDebounceId.current)\n      }\n\n      if (areArrowsLocked.current || !isDraggable || isScrolling || e.touches?.length > 1) {\n        return\n      }\n\n      isMomentum.current = false\n      setIsDragging(true)\n\n      const xOffset = getClientXOffset(e)\n      touchStartRef.current = xOffset\n      touchEndRef.current = xOffset\n    },\n    [isDraggable, isScrolling, setIsDragging],\n  )\n\n  const onTouchMove = useCallback(\n    (e) => {\n      e.stopPropagation()\n\n      if (areArrowsLocked.current || isMomentum.current || !isDraggable || !isDragging || isScrolling) {\n        return\n      }\n\n      touchEndRef.current = getClientXOffset(e)\n      const delta = touchStartRef.current - touchEndRef.current\n      touchStartRef.current = touchEndRef.current\n\n      currentDragSpeed.current = delta\n\n      if (delta !== 0) {\n        setTranslateOffset({ offset: translateOffset.current - delta })\n      }\n    },\n    [isDraggable, isScrolling, isDragging, setTranslateOffset],\n  )\n\n  const onTouchEnd = useCallback(\n    (e) => {\n      if (momentumDebounceId.current) {\n        cancelAnimationFrame(momentumDebounceId.current)\n      }\n\n      if (areArrowsLocked.current || !isDraggable || isScrolling || e.touches?.length > 0) {\n        return\n      }\n\n      if (hasDragMomentum) {\n        isMomentum.current = true\n\n        const momentumFunc = (speed) => {\n          currentDragSpeed.current = speed\n          momentumDebounceId.current = requestAnimationFrame(() => {\n            const newTranslateOffset = translateOffset.current - speed\n\n            if (Math.abs(speed) <= 1 || newTranslateOffset >= maxScrollX || newTranslateOffset <= minScrollX) {\n              isMomentum.current = false\n              setIsDragging(false)\n              currentDragSpeed.current = 0\n            } else {\n              setTranslateOffset({ offset: newTranslateOffset })\n              momentumFunc(speed * dragMomentumDecay)\n            }\n          })\n        }\n\n        momentumFunc(\n          currentDragSpeed.current < 0\n            ? Math.max(currentDragSpeed.current, -dragMomentumSpeed)\n            : Math.min(currentDragSpeed.current, dragMomentumSpeed),\n        )\n      } else {\n        setIsDragging(false)\n      }\n    },\n    [\n      hasDragMomentum,\n      dragMomentumSpeed,\n      dragMomentumDecay,\n      minScrollX,\n      maxScrollX,\n      isDraggable,\n      isScrolling,\n      setIsDragging,\n      setTranslateOffset,\n    ],\n  )\n\n  const onScroll = useCallback(\n    (e) => {\n      if (areArrowsLocked.current || !isScrollable || isDragging) {\n        return\n      }\n\n      //TODO handle mouse wheel scrolling correctly\n      // const isWheel = e.deltaX === 0 && Math.abs(e.deltaY) > 0\n      const scrollDelta = e.deltaX\n      const scrollDirection = Math.sign(scrollDelta)\n\n      if (\n        (translateOffset.current >= maxScrollX && scrollDirection === -1) ||\n        (translateOffset.current <= minScrollX && scrollDirection === 1)\n      ) {\n        setIsScrolling(false)\n        return\n      }\n\n      if (!isScrolling) {\n        setIsScrolling(true)\n      }\n\n      const newTranslateOffset =\n        translateOffset.current - scrollDirection * Math.min(scrollSpeed, Math.abs(scrollDelta))\n\n      const debounceFunc = () => {\n        setIsScrolling(false)\n      }\n\n      if (scrollDebounceId.current) {\n        clearTimeout(scrollDebounceId.current)\n      }\n\n      if (!isInfinite && newTranslateOffset >= maxScrollX) {\n        setTranslateOffset({ offset: maxScrollX })\n      } else if (!isInfinite && newTranslateOffset <= minScrollX) {\n        setTranslateOffset({ offset: minScrollX })\n      } else {\n        setTranslateOffset({ offset: newTranslateOffset })\n\n        scrollDebounceId.current = setTimeout(debounceFunc, 100)\n      }\n    },\n    [\n      isInfinite,\n      isScrollable,\n      scrollSpeed,\n      isScrolling,\n      minScrollX,\n      translateOffset,\n      isDragging,\n      setIsScrolling,\n      setTranslateOffset,\n    ],\n  )\n\n  useEffect(() => {\n    //remove clones from tab index\n    Array.from(slideContainerRef.current.children).forEach((child, index) => {\n      if (index < minTabIndex || index > maxTabIndex) {\n        child.querySelectorAll('*').forEach((node) => {\n          node.tabIndex = -1\n        })\n      }\n    })\n  }, [minTabIndex, maxTabIndex, slideContainerRef.current])\n\n  const onSlideFocus = useCallback(\n    (i) => (e) => {\n      const isFirstFocus = !e.currentTarget.contains(e.relatedTarget)\n\n      if (isFirstFocus && i >= minTabIndex && i <= maxTabIndex) {\n        //prevent auto-scroll when tabbing\n        slidesOuterContainerRef.current.scrollLeft = 0\n\n        const isEnabled = !areArrowsLocked.current && !(isDraggable && isDragging) && !(isScrollable && isScrolling)\n\n        if (isEnabled && (i < index.left || i > index.right)) {\n          onArrowClick((i < index.left ? -1 : 1) * (isInfinite ? 1 : activeIndexes.length), () => {\n            //failsafe to prevent forced scrolling when focusing elements\n            slidesOuterContainerRef.current.scrollLeft = 0\n\n            slideContainerRef.current.addEventListener(\n              'transitionend',\n              () => {\n                slidesRefs[i]?.current?.firstChild?.focus()\n              },\n              { once: true },\n            )\n          })\n        }\n      }\n    },\n    [index, index.left, index.right, isInfinite, isDragging, isDraggable, isScrollable, isScrolling, onArrowClick],\n  )\n\n  const onSlideKeyDown = useCallback(\n    (e) => {\n      if (areArrowsLocked.current || (isDraggable && isDragging) || (isScrollable && isScrolling)) {\n        e.preventDefault()\n        e.stopPropagation()\n      }\n    },\n    [isDraggable, isDragging, isScrollable, isScrolling],\n  )\n\n  const onMouseEnter = useCallback(() => {\n    setIsHovering(true)\n  }, [setIsHovering])\n\n  const onMouseLeave = useCallback(() => {\n    setIsHovering(false)\n  }, [setIsHovering])\n\n  useEffect(() => {\n    if (!areArrowsLocked.current && !(isDraggable && isDragging) && !(isScrollable && isScrolling)) {\n      if (momentumDebounceId.current) {\n        cancelAnimationFrame(momentumDebounceId.current)\n      }\n\n      if (scrollDebounceId.current) {\n        clearTimeout(scrollDebounceId.current)\n      }\n\n      const newTranslateOffset = getTranslateOffset(index.left)\n      setTranslateOffset({ offset: newTranslateOffset })\n\n      //focus correct child after scrolling\n      if (translateOffset.current !== newTranslateOffset) {\n        slidesRefs[index.left]?.current?.firstChild?.focus()\n      }\n\n      touchStartRef.current = 0\n      touchEndRef.current = 0\n    }\n  }, [isDragging, isDraggable, isScrolling, isScrollable])\n\n  const containerCss = useMemo(\n    () =>\n      ContainerCss({\n        minDisplayCount,\n        displayCount,\n        slideAnchors,\n      }),\n    [slideAnchors, slideAnchors?.length, minDisplayCount, displayCount],\n  )\n\n  return (\n    <div\n      className={styles.container}\n      style={{\n        ...containerCss,\n        ...style,\n      }}\n      ref={containerRef}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n    >\n      <div className={styles.slidesAndArrowsContainer} onMouseLeave={onTouchEnd}>\n        {RenderArrows ? (\n          <RenderArrows\n            startIndex={index.left - clonesLength}\n            endIndex={index.right - clonesLength}\n            activeIndexes={activeIndexes}\n            isLeft={true}\n            isRight={false}\n            isHidden={!isHovering || isScrolling || isDragging || !showLeftArrow}\n            scrollBy={onArrowClick}\n            arrowProps={arrowLeftProps}\n            scrollCount={arrowScrollCount}\n          />\n        ) : null}\n        <div ref={slidesOuterContainerRef} className={styles.slidesOuterContainer}>\n          <ul\n            ref={slideContainerRef}\n            className={styles.slidesContainer}\n            style={{\n              display: 'flex',\n              flexDirection: 'row',\n              listStyleType: 'none',\n              margin: '0px',\n              padding: '0px',\n              ...slideContainerStyle,\n            }}\n            onTouchStart={onTouchStart}\n            onTouchMove={onTouchMove}\n            onTouchEnd={onTouchEnd}\n            onTouchCancel={onTouchEnd}\n            onMouseDown={onTouchStart}\n            onMouseMove={onTouchMove}\n            onMouseUp={onTouchEnd}\n            onWheel={onScroll}\n          >\n            {slides.map((slide, i) => (\n              <li\n                style={{\n                  paddingRight: `${!isInfinite && i === slides.length - 1 ? 0 : gridGap}px`,\n                  ...slideStyle,\n                }}\n                ref={slidesRefs[i]}\n                key={i}\n                onFocus={onSlideFocus(i)}\n                onKeyDown={onSlideKeyDown}\n              >\n                {slide}\n              </li>\n            ))}\n          </ul>\n        </div>\n        {RenderArrows ? (\n          <RenderArrows\n            startIndex={index.left - clonesLength}\n            endIndex={index.right - clonesLength}\n            activeIndexes={activeIndexes}\n            isLeft={false}\n            isRight={true}\n            isHidden={!isHovering || isScrolling || isDragging || !showRightArrow}\n            scrollBy={onArrowClick}\n            arrowProps={arrowRightProps}\n            scrollCount={arrowScrollCount}\n          />\n        ) : null}\n      </div>\n      {RenderIndexes ? (\n        <RenderIndexes\n          startIndex={index.left - clonesLength}\n          endIndex={index.right - clonesLength}\n          activeIndexes={activeIndexes}\n          indexesPerRow={indexesPerRow || rawSlides.length}\n          slideAnchors={coreSlideAnchors}\n          scrollBy={onArrowClick}\n          indexContainerProps={indexContainerProps}\n          indexProps={indexProps}\n        />\n      ) : null}\n    </div>\n  )\n}\n","import React, { useCallback, useMemo } from 'react'\nimport styles from './Arrows.module.css'\n\nexport const Arrows = ({ isLeft, isHidden, scrollBy, scrollCount, arrowProps, arrowIconProps }) => {\n  const arrowClassName = useMemo(\n    () =>\n      `${styles.arrow} ${isLeft ? styles.leftArrow : styles.rightArrow} ${isHidden ? styles.isArrowHidden : ''} ${\n        arrowProps?.className || ''\n      }`,\n    [arrowProps?.className, isLeft, isHidden],\n  )\n\n  const onClick = useCallback(\n    (callback, scrollCount) => (e) => {\n      e.preventDefault()\n      e.stopPropagation()\n\n      if (typeof callback === 'function') {\n        callback(e)\n      }\n\n      scrollBy(scrollCount)\n    },\n    [arrowProps?.onClick, scrollBy, isLeft],\n  )\n\n  const iconClassName = useMemo(\n    () =>\n      `${styles.arrowIcon} ${isLeft ? styles.leftArrowIcon : styles.rightArrowIcon} ${arrowIconProps?.className || ''}`,\n    [arrowIconProps?.className, isLeft],\n  )\n\n  return (\n    <button\n      {...arrowProps}\n      tabIndex={-1} //no focus by default for ADA\n      className={arrowClassName}\n      onClick={onClick(arrowProps?.onClick, isLeft ? -scrollCount : scrollCount)}\n    >\n      <span {...arrowIconProps} className={iconClassName} />\n    </button>\n  )\n}\n","import React, { useCallback, useMemo, useRef } from 'react'\nimport styles from './Indexes.module.css'\n\nexport const Indexes = ({\n  activeIndexes,\n  startIndex,\n  indexesPerRow,\n  slideAnchors,\n  scrollBy,\n  indexContainerProps,\n  indexProps,\n}) => {\n  const containerRef = useRef()\n  const gap = 5\n  const borderWidth = 2\n  const width = useMemo(() => `calc((100% - ${(indexesPerRow - 1) * gap}px) / ${indexesPerRow})`, [indexesPerRow])\n\n  const containerClassName = useMemo(\n    () => `${styles.indexContainer} ${indexContainerProps?.className || ''}`,\n    [indexContainerProps?.className],\n  )\n\n  const iconClassName = useMemo(() => `${styles.index} ${indexProps?.className || ''}`, [indexProps?.className])\n\n  const onClick = useCallback(\n    (callback, scrollCount) => (e) => {\n      if (typeof callback === 'function') {\n        callback(e)\n      }\n\n      scrollBy(scrollCount)\n    },\n    [scrollBy],\n  )\n\n  return (\n    <div\n      {...indexContainerProps}\n      ref={containerRef}\n      className={containerClassName}\n      style={{ gap: `${gap}px`, ...indexContainerProps?.style }}\n    >\n      {slideAnchors?.map((_, i) => (\n        <button\n          tabIndex={-1} //disabled for ADA\n          key={i}\n          {...indexProps}\n          className={iconClassName}\n          style={{\n            backgroundColor: activeIndexes.includes(i) ? 'black' : 'transparent',\n            width,\n            borderWidth: `${borderWidth}px`,\n            ...indexProps?.style,\n          }}\n          onClick={onClick(indexProps?.onClick, i - startIndex)}\n        />\n      ))}\n    </div>\n  )\n}\n"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","getClientXOffset","e","touches","clientX","calcMinWidth","slideAnchors","count","length","reduce","acc","start","i","groupWidth","Math","min","end","isLeft","isHidden","scrollBy","scrollCount","arrowProps","arrowIconProps","arrowClassName","useMemo","styles","className","onClick","useCallback","callback","preventDefault","stopPropagation","iconClassName","React","tabIndex","isInfinite","startIndex","isScrollable","isDraggable","hasDragMomentum","dragMomentumSpeed","dragMomentumDecay","minDisplayCount","displayCount","gridGap","arrows","RenderArrows","arrowLeftProps","arrowRightProps","scrollSpeed","shouldScrollByDisplayCount","indexesPerRow","indexes","RenderIndexes","indexContainerProps","indexProps","slideContainerStyle","slideStyle","children","isHovering","setIsHovering","useState","momentumDebounceId","useRef","transitionDebounceId","areArrowsLocked","currentDragSpeed","resizeObserverRef","rawSlides","Children","toArray","clonesLength","setClonesLength","slides","slice","slideCount","slidesRefs","Array","fill","map","_","createRef","setSlideAnchors","coreSlideAnchors","minTabIndex","index","maxTabIndex","containerRef","slideContainerRef","slidesOuterContainerRef","getTranslateOffset","newIndex","newSlideAnchors","setIndexState","left","right","activeIndexes","arrowScrollCount","maxIndex","setMaxIndex","isDragging","setIsDragging","isScrolling","setIsScrolling","isMomentum","translateOffset","touchStartRef","touchEndRef","scrollDebounceId","minScrollX","showLeftArrow","showRightArrow","getBoundIndex","newMaxIndex","max","getScrollIndex","newTranslateOffset","currentOffset","width","current","clientWidth","setTranslateOffset","offset","newClonesLength","requestAnimationFrame","boundOffset","rightAnchor","leftAnchor","cancelAnimationFrame","transitionDuration","transform","onResize","slideRefs","push","calculateAnchors","containerWidth","leftCount","rightCount","reduceRight","calcClonesLength","lastEnd","findIndex","newLeftIndex","newScrollIndex","useLayoutEffect","disconnect","ResizeObserver","observe","forEach","useEffect","onArrowClick","indexOffset","boundIndexOffset","newBoundIndex","wrappedIndex","wrappedTranslateOffset","addEventListener","focus","once","onTouchStart","xOffset","onTouchMove","delta","onTouchEnd","momentumFunc","speed","abs","onScroll","scrollDelta","deltaX","scrollDirection","sign","debounceFunc","clearTimeout","setTimeout","from","child","querySelectorAll","node","onSlideFocus","currentTarget","contains","relatedTarget","scrollLeft","onSlideKeyDown","onMouseEnter","onMouseLeave","containerCss","minWidth","ContainerCss","endIndex","isRight","display","flexDirection","listStyleType","margin","padding","onTouchCancel","onMouseDown","onMouseMove","onMouseUp","onWheel","slide","paddingRight","key","onFocus","onKeyDown","containerClassName","gap","_extends","backgroundColor","includes","borderWidth"],"mappings":"8KAAA,SAASA,EAAYC,EAAKC,QACX,IAARA,IAAiBA,EAAM,CAAA,GAC5B,IAAIC,EAAWD,EAAIC,SAEnB,GAAKF,GAA2B,oBAAbG,SAAnB,CAEA,IAAIC,EAAOD,SAASC,MAAQD,SAASE,qBAAqB,QAAQ,GAC9DC,EAAQH,SAASI,cAAc,SACnCD,EAAME,KAAO,WAEI,QAAbN,GACEE,EAAKK,WACPL,EAAKM,aAAaJ,EAAOF,EAAKK,YAKhCL,EAAKO,YAAYL,GAGfA,EAAMM,WACRN,EAAMM,WAAWC,QAAUb,EAE3BM,EAAMK,YAAYR,SAASW,eAAed,GAnBY,CAqB1D,qqBCrBA,MAAMe,EAAoBC,GAAMA,GAAGC,UAAU,IAAIC,SAAWF,GAAGE,SAAW,EAapEC,EAAe,CAACC,EAAcC,IAClCD,GAAcE,QAAUD,GAASA,EAAQ,EACrCD,EAAaG,QAAO,CAACC,GAAOC,SAASC,KACnC,MAAMC,EAAaP,EAAaQ,KAAKC,IAAIH,EAAIL,EAAQ,EAAGD,EAAaE,OAAS,IAAIQ,IAAML,EAExF,OAAOE,EAAaH,EAAMG,EAAaH,CAAvC,GACC,GACH,s2DCrBgB,EAAGO,SAAQC,WAAUC,WAAUC,cAAaC,aAAYC,qBAC5E,MAAMC,EAAiBC,EAAOA,SAC5B,IACG,GAAEC,KAAgBR,EAASQ,EAAmBA,KAAqBP,EAAWO,EAAuB,MACpGJ,GAAYK,WAAa,MAE7B,CAACL,GAAYK,UAAWT,EAAQC,IAG5BS,EAAUC,EAAWA,aACzB,CAACC,EAAUT,IAAiBlB,IAC1BA,EAAE4B,iBACF5B,EAAE6B,kBAEsB,mBAAbF,GACTA,EAAS3B,GAGXiB,EAASC,EAAT,GAEF,CAACC,GAAYM,QAASR,EAAUF,IAG5Be,EAAgBR,WACpB,IACG,GAAEC,KAAoBR,EAASQ,EAAuBA,KAAyBH,GAAgBI,WAAa,MAC/G,CAACJ,GAAgBI,UAAWT,IAG9B,OACEgB,EAAAA,oCACMZ,EADN,CAEEa,UAAW,EACXR,UAAWH,EACXI,QAASA,EAAQN,GAAYM,QAASV,GAAUG,EAAcA,KAE9Da,oCAAUX,EAAV,CAA0BI,UAAWM,KAPzC,mBDIsB,EACtBG,cAAa,EACbC,aAAa,EACbC,gBAAe,EACfC,eAAc,EACdC,mBAAkB,EAClBC,oBAAoB,GACpBC,oBAAoB,IACpBC,kBAAkB,EAClBC,eAAe,EACfC,UAAU,GACVC,OAAQC,EACRC,iBAAiB,CAZM,EAavBC,kBAAkB,CAbK,EAcvBC,cAAc,GACd7B,cAAc,EACd8B,8BAA6B,EAC7BC,gBAAgB,EAChBC,QAASC,EACTC,sBAAsB,CAnBC,EAoBvBC,aAAa,CApBU,EAqBvB/D,QAAQ,CArBe,EAsBvBgE,sBAAsB,CAtBC,EAuBvBC,aAAa,CAvBU,EAwBvBC,eAEA,MAAOC,EAAYC,GAAiBC,EAAQA,UAAC,GAEvCC,EAAqBC,EAAAA,SAErBC,EAAuBD,EAAAA,SAEvBE,EAAkBF,UAAO,GAEzBG,EAAmBH,SAAO,GAE1BI,EAAoBJ,EAAAA,SAEpBK,EAAYnC,EAAAA,QAAMoC,SAASC,QAAQZ,IAAa,IAE/Ca,EAAcC,GAAmBX,EAAAA,SAAS1B,EAAaiC,EAAU5D,OAAS,GAE3EiE,EAASjD,EAAOA,SACpB,IACEW,GAAcoC,EACV,IACKH,EAAUM,MAAMN,EAAU5D,OAAS+D,EAAcH,EAAU5D,WAC3D4D,KACAA,EAAUM,MAAM,EAAGH,IAExBH,GACN,CAACV,EAAUU,EAAU5D,OAAQ2B,EAAYoC,IAGrCI,EAAaF,EAAOjE,OAEpBoE,EAAapD,EAAAA,SACjB,IACEqD,MAAMF,GACHG,KAAK,MACLC,KAAI,CAACC,EAAGpE,UAA6B,IAAfgE,EAA6BA,EAAWhE,GAAK,OAASqB,EAAK,QAACgD,eACvF,CAACN,KAGIrE,EAAc4E,GAAmBrB,EAAQA,SAAC,IAE3CsB,EAAmB3D,EAAAA,SACvB,IAAOW,EAAa7B,EAAaoE,MAAMH,EAAcjE,EAAaE,OAAS+D,GAAgBjE,GAC3F,CAACA,EAAcA,EAAaE,OAAQ2B,IAGhCiD,EAAc5D,EAAAA,SAClB,IAAM2D,EAAiB,IAAIE,OAASd,GACpC,CAACY,EAAkBA,EAAiB3E,SAEhC8E,EAAc9D,EAAAA,SAClB,IAAM2D,EAAiBA,EAAiB3E,OAAS,IAAI6E,OAASd,EAAeH,EAAU5D,OAAS,GAChG,CAAC2E,EAAkBA,EAAiB3E,SAGhC+E,EAAexB,SAAO,MAEtByB,EAAoBzB,SAAO,MAE3B0B,EAA0B1B,SAAO,MAEjC2B,EAAqB9D,EAAWA,aACpC,CAAC+D,EAAUC,EAAkBtF,KAC3B,MAAMK,EAAQiF,IAAkBD,IAAWhF,MAC3C,OAAgB,MAATA,GAAiB,EAAIA,EAAQ,CAApC,GAGF,CAACL,KAGI+E,GAAOQ,IAAiBhC,WAAS,CAAEiC,KAAM1D,EAAamC,EAAcwB,MAAO3D,EAAamC,IAEzFyB,GAAgBxE,EAAAA,SAAQ,IACT,MAAf6D,IAAOS,MAAgC,MAAhBT,IAAOU,MACzBlB,MAAMQ,GAAMU,MAAQV,GAAMS,KAAO,GACrChB,KAAKO,GAAMS,MACXf,KAAI,CAACC,EAAGpE,KAAOyE,GAAMS,KAAOlF,EAAI2D,GAAgBH,EAAU5D,SAEtD,IAER,CAAC6E,IAAOS,KAAMT,IAAOU,MAAOxB,IAEzB0B,GAAmBzE,WACvB,IACEW,EAAa,EAAIe,EAA6B8C,GAAcxF,OAASM,KAAKC,IAAIiF,GAAcxF,OAAQY,IACtG,CAACe,EAAYe,EAA4B8C,GAAeA,GAAcxF,OAAQY,KAGzE8E,GAAUC,IAAetC,EAAAA,SAASc,EAAa,IAE/CyB,GAAYC,IAAiBxC,EAAQA,UAAC,IAEtCyC,GAAaC,IAAkB1C,EAAQA,UAAC,GAEzC2C,GAAazC,UAAO,GAEpB0C,GAAkB1C,EAAAA,QAAO,IAAM2B,EAAmBL,GAAMS,QAExDY,GAAgB3C,SAAO,GAEvB4C,GAAc5C,SAAO,GAErB6C,GAAmB7C,EAAAA,SAInB8C,GAAarF,EAAAA,SAAQ,KACzB,MAAMb,EAAQL,IAAe4F,KAAWvF,MAExC,OAAgB,MAATA,GAAiB,EAAIA,EAAQ,CAApC,GACC,CAACL,EAAcqE,EAAYuB,KAExBY,GAAgB3E,GAA6B,IAAfkD,GAAMS,KAEpCiB,GAAiB5E,GAAckD,GAAMS,KAAOI,GAE5Cc,GAAgBpF,EAAAA,aACpB,CAAC+D,EAAUsB,EAAcf,KAAapF,KAAKoG,IAAI,EAAGpG,KAAKC,IAAIkG,EAAatB,KACxE,CAACO,KAGGiB,GAAiBvF,EAAWA,aAChC,CAACwF,EAAoBxB,EAAkBtF,KACrC,MAAM+G,GAAiB,EAAID,EAErBzB,EAAWC,EAAgBnF,QAC/B,CAACC,GAAOC,QAAOK,MAAKsG,SAAS1G,KAC3BF,EAAIoF,KAAOuB,GAAiB1G,EAAS0G,GAAiB1G,EAAQ2G,EAAQ,EAAI1G,EAAI,EAAIA,EAAKF,EAAIoF,KAC3FpF,EAAIqF,MACsB,MAAxBR,EAAagC,QACTF,EAAgB9B,EAAagC,QAAQC,aAAexG,EAClDJ,EACAF,EAAIqF,MACNpB,EAAa,EAEZjE,IAET,CACEoF,KAAM,EACNC,MAAO,IAIX,MAAO,CACLD,KAAMkB,GAAcrB,EAASG,MAC7BC,MAAOjF,KAAKoG,IAAIpG,KAAKC,IAAI4D,EAAa,EAAGgB,EAASI,OAAQJ,EAASG,MAFrE,GAKF,CAACnB,EAAYrE,EAAc0G,KAGvBS,GAAqB7F,EAAAA,aACzB,EAAG8F,SAAQrC,QAAOO,kBAAkBtF,EAAcqH,kBAAkBpD,MAClEqD,uBAAsB,KACpB,IAAKpC,EAAkB+B,QACrB,OAGF,IAAIM,EAAcH,EAElB,GAAIvF,GAAcwF,GAAmB/B,EAAgBpF,OAAQ,CAC3D,MAAMsH,EAAclC,EAAgBA,EAAgBpF,OAASmH,EAAkB,GAAG3G,IAAM4B,EAClFmF,EAAanC,EAAgB+B,GAAiBhH,MAEhD+G,EAASI,EAAc,EACzBD,EAAcH,EAASI,EAAcC,EAC5BL,EAASK,EAAa,IAC/BF,EAAcH,EAASK,EAAaD,EAEvC,CAED,MAAMnC,EAAoB,MAATN,EAAgB8B,GAAeU,GAAexC,EAE3DrB,EAAqBuD,SACvBS,qBAAqBhE,EAAqBuD,UAGxCjB,IAAeF,MACjBZ,EAAkB+B,QAAQ/H,MAAMyI,mBAAqB,OAGvDzC,EAAkB+B,QAAQ/H,MAAM0I,UAAa,aAAYL,OAEzD7D,EAAqBuD,QAAUK,uBAAsB,KACnDpC,EAAkB+B,QAAQ/H,MAAMyI,mBAAqB,OAArD,IAGFxB,GAAgBc,QAAUM,EAC1BhC,GAAcF,EAAd,GAnCF,GAsCF,CACE/C,EACA0D,GACAF,GACA9F,EACAA,GAAcE,OACd+D,EACA4C,GACAtB,GACAsB,KAkDEgB,GAAW,KACf,MAAMvC,EAlTe,EAACwC,EAAY,GAAIxF,EAAST,IACjDiG,EAAU3H,QAAO,CAACC,EAAKvB,EAAKyB,KAC1B,GAAIzB,GAAKoI,QAAS,CAChB,MAAMD,EAAQnI,EAAIoI,QAAQC,aAAgBrF,GAAcvB,IAAMwH,EAAU5H,OAAS,EAAQoC,EAAJ,GAC/EjC,EAAc,IAANC,EAAU,EAAIF,EAAIE,EAAI,GAAGI,IAAM4B,EACvC5B,EAAML,EAAQ2G,EACpB5G,EAAI2H,KAAK,CAAE1H,QAAOK,MAAKsG,QAAOjC,MAAOzE,GACtC,CACD,OAAOF,CAAP,GACC,IAySuB4H,CAAiB1D,EAAYhC,EAAST,GAC9D,GAAIyD,GAAiBpF,OAAQ,CAC3B,MAAM+H,EAAiB/C,EAAkB+B,QAAQC,YAE3CG,EAnDgB/B,KACxB,IAAKzD,EACH,OAAO,EAGT,MAAMoG,EAAiB/C,EAAkB+B,QAAQC,YAE3CrC,EAAmBhD,EACrByD,EAAgBlB,MAAMH,EAAcqB,EAAgBpF,OAAS+D,GAC7DqB,EAEE4C,EAAYrD,EAAiB1E,QACjC,CAACC,GAAO4G,SAAS1G,KACfF,EAAI4G,MAAQ5G,EAAI4G,MAAQA,EAEP,MAAb5G,EAAI2E,OAAiB3E,EAAI4G,MAAQiB,IACnC7H,EAAI2E,MAAQzE,EAAI,GAGXF,IAET,CACE4G,MAAO,EACPjC,MAAO,OAETA,MAEIoD,EAAatD,EAAiBuD,aAClC,CAAChI,GAAO4G,SAAS1G,KACfF,EAAI4G,MAAQ5G,EAAI4G,MAAQA,EAEP,MAAb5G,EAAI2E,OAAiB3E,EAAI4G,MAAQiB,IACnC7H,EAAI2E,MAAQF,EAAiB3E,OAASI,GAGjCF,IAET,CACE4G,MAAO,EACPjC,MAAO,OAETA,MAEF,OAAOvE,KAAKoG,IAAIsB,EAAWC,EAAY,EAAvC,EAQ0BE,CAAiB/C,GAEnCgD,EAAUhD,EAAgBA,EAAgBpF,OAAS,GAAGQ,IAEtDiG,EAAcD,GAClBpB,EAAgBiD,WAAU,EAAGlI,WAAYA,EAAQ4H,GAAkBK,IACnEhD,EAAgBpF,OAAS,GAGrBsI,EAAe9B,GAAc3B,GAAMS,KAAOvB,EAAeoD,EAAiBV,GAC1EG,EAAqB1B,EAAmBoD,EAAclD,GACtDmD,EAAiB5B,GAAeC,EAAoBxB,GAE1DpB,EAAgBmD,GAChB9B,GAAckD,GACd7D,EAAgBU,GAChBO,GAAYc,GACZQ,GAAmB,CAAEC,OAAQN,EAAoB/B,MAAO0D,GACzD,GAGHC,EAAAA,iBAAgB,KACV7E,EAAkBoD,SACpBpD,EAAkBoD,QAAQ0B,aAG5B9E,EAAkBoD,QAAU,IAAI2B,gBAAe,IAAMf,OACrDhE,EAAkBoD,QAAQ4B,QAAQ5D,EAAagC,SAC/C3C,EAAWwE,SAAQ,EAAG7B,aAAcpD,EAAkBoD,QAAQ4B,QAAQ5B,KAEtEY,IAAQ,GACP,CAACxD,EAAYJ,EAAc7B,EAAiBC,EAAcC,EAAST,IAEtEkH,EAAAA,WAAU,KACR9C,IAAe,GAEXpE,GACFgG,IACD,GACA,IAEH,MAAMmB,GAAe1H,EAAAA,aACnB,CAAC2H,EAAa1H,EAAUoG,EAAqB,WAC3C,IAAKhE,EAAgBsD,QAAS,CAC5BtD,EAAgBsD,SAAU,EAE1B,MAAMiC,EAAmB1I,KAAKC,IAAIkF,GAAkBsD,GACpD,IAAIE,EAAgBtH,EAAakD,GAAMS,KAAO0D,EAAmBxC,GAAc3B,GAAMS,KAAO0D,GAE5F,GAAIrH,EAAY,CACd,MAAMuH,EACJD,EAAgBnJ,EAAaE,OAAS+D,EAAe,EACjDkF,EAAgBrF,EAAU5D,OAASyF,GACnCwD,EAAgBlF,EAAe,EAC/BH,EAAU5D,OAASyF,GAAmBwD,EACtC,KAEN,GAAoB,MAAhBC,EAAsB,CACxBlE,EAAkB+B,QAAQ/H,MAAMyI,mBAAqB,MAErD,MAAM0B,GAA0BrJ,EAAaoJ,GAAc/I,MAC3D6E,EAAkB+B,QAAQ/H,MAAM0I,UAAa,aAAYyB,OAEzDlD,GAAgBc,QAAUoC,EAC1BF,EAAgBzC,GAAc0C,EAAeH,EAC9C,CACF,CAED3B,uBAAsB,KAGpB,GAFApC,EAAkB+B,QAAQ/H,MAAMyI,mBAAqBA,EAEjDwB,IAAkBpE,GAAMS,KAAM,CAChC,MAAMsB,EAAqB1B,EAAmB+D,GACxCV,EAAiB5B,GAAeC,GAEtC5B,EAAkB+B,QAAQqC,iBACxB,iBACA,KACEhF,EAAWmE,EAAejD,OAAOyB,SAAS5H,YAAYkK,QACtD5F,EAAgBsD,SAAU,CAA1B,GAEF,CAAEuC,MAAM,IAGVlC,uBAAsB,KACpBpC,EAAkB+B,QAAQ/H,MAAM0I,UAAa,aAAYd,MAAzD,IAGFX,GAAgBc,QAAUH,EAE1BvB,GAAckD,GAEdlH,IAAWkH,EACZ,MACC9E,EAAgBsD,SAAU,CAC3B,GAEJ,IAEH,CACEjH,EACA6B,EACAkD,GACAV,EACAJ,EACA4C,GACAzB,EACA+B,GACAT,GACAnB,KAIEkE,GAAenI,EAAWA,aAC7B1B,IAKC,GAJI4D,EAAmByD,SACrBS,qBAAqBlE,EAAmByD,SAGtCtD,EAAgBsD,UAAYjF,GAAegE,IAAepG,EAAEC,SAASK,OAAS,EAChF,OAGFgG,GAAWe,SAAU,EACrBlB,IAAc,GAEd,MAAM2D,EAAU/J,EAAiBC,GACjCwG,GAAca,QAAUyC,EACxBrD,GAAYY,QAAUyC,CAAtB,GAEF,CAAC1H,EAAagE,GAAaD,KAGvB4D,GAAcrI,EAAWA,aAC5B1B,IAGC,GAFAA,EAAE6B,kBAEEkC,EAAgBsD,SAAWf,GAAWe,UAAYjF,IAAgB8D,IAAcE,GAClF,OAGFK,GAAYY,QAAUtH,EAAiBC,GACvC,MAAMgK,EAAQxD,GAAca,QAAUZ,GAAYY,QAClDb,GAAca,QAAUZ,GAAYY,QAEpCrD,EAAiBqD,QAAU2C,EAEb,IAAVA,GACFzC,GAAmB,CAAEC,OAAQjB,GAAgBc,QAAU2C,GACxD,GAEH,CAAC5H,EAAagE,GAAaF,GAAYqB,KAGnC0C,GAAavI,EAAWA,aAC3B1B,IAKC,GAJI4D,EAAmByD,SACrBS,qBAAqBlE,EAAmByD,WAGtCtD,EAAgBsD,UAAYjF,GAAegE,IAAepG,EAAEC,SAASK,OAAS,GAIlF,GAAI+B,EAAiB,CACnBiE,GAAWe,SAAU,EAErB,MAAM6C,EAAgBC,IACpBnG,EAAiBqD,QAAU8C,EAC3BvG,EAAmByD,QAAUK,uBAAsB,KACjD,MAAMR,EAAqBX,GAAgBc,QAAU8C,EAEjDvJ,KAAKwJ,IAAID,IAAU,GAAKjD,GAnUnB,GAmUuDA,GAAsBP,IACpFL,GAAWe,SAAU,EACrBlB,IAAc,GACdnC,EAAiBqD,QAAU,IAE3BE,GAAmB,CAAEC,OAAQN,IAC7BgD,EAAaC,EAAQ5H,GACtB,GAVH,EAcF2H,EACElG,EAAiBqD,QAAU,EACvBzG,KAAKoG,IAAIhD,EAAiBqD,SAAU/E,GACpC1B,KAAKC,IAAImD,EAAiBqD,QAAS/E,GAE1C,MACC6D,IAAc,EACf,GAEH,CACE9D,EACAC,EACAC,EACAoE,GA3Ve,EA6VfvE,EACAgE,GACAD,GACAoB,KAIE8C,GAAW3I,EAAWA,aACzB1B,IACC,GAAI+D,EAAgBsD,UAAYlF,GAAgB+D,GAC9C,OAKF,MAAMoE,EAActK,EAAEuK,OAChBC,EAAkB5J,KAAK6J,KAAKH,GAElC,GACG/D,GAAgBc,SAhXJ,IAgXkD,IAArBmD,GACzCjE,GAAgBc,SAAWV,IAAkC,IAApB6D,EAG1C,YADAnE,IAAe,GAIZD,IACHC,IAAe,GAGjB,MAAMa,EACJX,GAAgBc,QAAUmD,EAAkB5J,KAAKC,IAAIkC,EAAanC,KAAKwJ,IAAIE,IAEvEI,EAAe,KACnBrE,IAAe,EAAf,EAGEK,GAAiBW,SACnBsD,aAAajE,GAAiBW,UAG3BpF,GAAciF,GAtYJ,EAuYbK,GAAmB,CAAEC,OAvYR,KAwYHvF,GAAciF,GAAsBP,GAC9CY,GAAmB,CAAEC,OAAQb,MAE7BY,GAAmB,CAAEC,OAAQN,IAE7BR,GAAiBW,QAAUuD,WAAWF,EAAc,KACrD,GAEH,CACEzI,EACAE,EACAY,EACAqD,GACAO,GACAJ,GACAL,GACAG,GACAkB,KAIJ4B,EAAAA,WAAU,KAERxE,MAAMkG,KAAKvF,EAAkB+B,QAAQ7D,UAAU0F,SAAQ,CAAC4B,EAAO3F,MACzDA,EAAQD,GAAeC,EAAQC,IACjC0F,EAAMC,iBAAiB,KAAK7B,SAAS8B,IACnCA,EAAKhJ,UAAY,CAAjB,GAEH,GALH,GAOC,CAACkD,EAAaE,EAAaE,EAAkB+B,UAEhD,MAAM4D,GAAevJ,EAAAA,aAClBhB,GAAOV,IAGN,IAFsBA,EAAEkL,cAAcC,SAASnL,EAAEoL,gBAE7B1K,GAAKwE,GAAexE,GAAK0E,EAAa,CAExDG,EAAwB8B,QAAQgE,WAAa,IAE1BtH,EAAgBsD,SAAajF,GAAe8D,IAAiB/D,GAAgBiE,MAE9E1F,EAAIyE,GAAMS,MAAQlF,EAAIyE,GAAMU,QAC5CuD,IAAc1I,EAAIyE,GAAMS,MAAQ,EAAI,IAAM3D,EAAa,EAAI6D,GAAcxF,SAAS,KAEhFiF,EAAwB8B,QAAQgE,WAAa,EAE7C/F,EAAkB+B,QAAQqC,iBACxB,iBACA,KACEhF,EAAWhE,IAAI2G,SAAS5H,YAAYkK,OAApC,GAEF,CAAEC,MAAM,GALV,GASL,IAEH,CAACzE,GAAOA,GAAMS,KAAMT,GAAMU,MAAO5D,EAAYiE,GAAY9D,EAAaD,EAAciE,GAAagD,KAG7FkC,GAAiB5J,EAAWA,aAC/B1B,KACK+D,EAAgBsD,SAAYjF,GAAe8D,IAAgB/D,GAAgBiE,MAC7EpG,EAAE4B,iBACF5B,EAAE6B,kBACH,GAEH,CAACO,EAAa8D,GAAY/D,EAAciE,KAGpCmF,GAAe7J,EAAAA,aAAY,KAC/BgC,GAAc,EAAd,GACC,CAACA,IAEE8H,GAAe9J,EAAAA,aAAY,KAC/BgC,GAAc,EAAd,GACC,CAACA,IAEJyF,EAAAA,WAAU,KACR,KAAKpF,EAAgBsD,SAAajF,GAAe8D,IAAiB/D,GAAgBiE,IAAc,CAC1FxC,EAAmByD,SACrBS,qBAAqBlE,EAAmByD,SAGtCX,GAAiBW,SACnBsD,aAAajE,GAAiBW,SAGhC,MAAMH,EAAqB1B,EAAmBL,GAAMS,MACpD2B,GAAmB,CAAEC,OAAQN,IAGzBX,GAAgBc,UAAYH,GAC9BxC,EAAWS,GAAMS,OAAOyB,SAAS5H,YAAYkK,QAG/CnD,GAAca,QAAU,EACxBZ,GAAYY,QAAU,CACvB,IACA,CAACnB,GAAY9D,EAAagE,GAAajE,IAE1C,MAAMsJ,GAAenK,WACnB,IA1nBiB,GAAGmB,eAAcD,kBAAiBpC,mBACrD,MAAMsL,EAAWvL,EAAaC,EAAcoC,GACtC4E,EAAQjH,EAAaC,EAAcqC,GAEzC,MAAO,CACLiJ,SAAUA,EAAW,EAAK,GAAEA,MAAe,OAC3CtE,MAAOA,EAAQ,EAAK,GAAEA,MAAY,OAFpC,EAunBIuE,CAAa,CACXnJ,kBACAC,eACArC,kBAEJ,CAACA,EAAcA,GAAcE,OAAQkC,EAAiBC,IAGxD,OACEV,EAAA,QAAAxC,cAAA,MAAA,CACEiC,UAAWD,EACXjC,MAAO,IACFmM,MACAnM,GAELL,IAAKoG,EACLkG,aAAcA,GACdC,aAAcA,IAEdzJ,EAAA,QAAAxC,cAAA,MAAA,CAAKiC,UAAWD,EAAiCiK,aAAcvB,IAC5DrH,EACCb,EAAAA,QAAAxC,cAACqD,EAAD,CACEV,WAAYiD,GAAMS,KAAOvB,EACzBuH,SAAUzG,GAAMU,MAAQxB,EACxByB,cAAeA,GACf/E,QAAQ,EACR8K,SAAS,EACT7K,UAAWyC,GAAc2C,IAAeF,KAAeU,GACvD3F,SAAUmI,GACVjI,WAAY0B,EACZ3B,YAAa6E,KAEb,KACJhE,UAAAxC,cAAA,MAAA,CAAKN,IAAKsG,EAAyB/D,UAAWD,GAC5CQ,EAAA,QAAAxC,cAAA,KAAA,CACEN,IAAKqG,EACL9D,UAAWD,EACXjC,MAAO,CACLwM,QAAS,OACTC,cAAe,MACfC,cAAe,OACfC,OAAQ,MACRC,QAAS,SACN5I,GAELuG,aAAcA,GACdE,YAAaA,GACbE,WAAYA,GACZkC,cAAelC,GACfmC,YAAavC,GACbwC,YAAatC,GACbuC,UAAWrC,GACXsC,QAASlC,IAER9F,EAAOM,KAAI,CAAC2H,EAAO9L,IAClBqB,EAAA,QAAAxC,cAAA,KAAA,CACED,MAAO,CACLmN,aAAe,GAAGxK,GAAcvB,IAAM6D,EAAOjE,OAAS,EAAQoC,EAAJ,SACvDa,GAELtE,IAAKyF,EAAWhE,GAChBgM,IAAKhM,EACLiM,QAAS1B,GAAavK,GACtBkM,UAAWtB,IAEVkB,OAKR5J,EACCb,EAAA,QAAAxC,cAACqD,EAAD,CACEV,WAAYiD,GAAMS,KAAOvB,EACzBuH,SAAUzG,GAAMU,MAAQxB,EACxByB,cAAeA,GACf/E,QAAQ,EACR8K,SAAS,EACT7K,UAAWyC,GAAc2C,IAAeF,KAAeW,GACvD5F,SAAUmI,GACVjI,WAAY2B,EACZ5B,YAAa6E,KAEb,MAEL5C,EACCpB,EAAAA,sBAACoB,EAAD,CACEjB,WAAYiD,GAAMS,KAAOvB,EACzBuH,SAAUzG,GAAMU,MAAQxB,EACxByB,cAAeA,GACf7C,cAAeA,GAAiBiB,EAAU5D,OAC1CF,aAAc6E,EACdhE,SAAUmI,GACVhG,oBAAqBA,EACrBC,WAAYA,IAEZ,KAvFR,kBE1pBqB,EACrByC,gBACA5D,aACAe,gBACA7C,eACAa,WACAmC,sBACAC,iBAEA,MAAMgC,EAAexB,EAAAA,SAGfuD,EAAQ9F,EAAOA,SAAC,IAAO,gBAFjB,GAEiC2B,EAAgB,WAAiBA,MAAkB,CAACA,IAE3F4J,EAAqBvL,EAAAA,SACzB,IAAO,GAAEC,KAAyB6B,GAAqB5B,WAAa,MACpE,CAAC4B,GAAqB5B,YAGlBM,EAAgBR,EAAAA,SAAQ,IAAO,GAAEC,KAAgB8B,GAAY7B,WAAa,MAAM,CAAC6B,GAAY7B,YAE7FC,EAAUC,EAAWA,aACzB,CAACC,EAAUT,IAAiBlB,IACF,mBAAb2B,GACTA,EAAS3B,GAGXiB,EAASC,EAAT,GAEF,CAACD,IAGH,OACEc,EAAAA,iCACMqB,EADN,CAEEnE,IAAKoG,EACL7D,UAAWqL,EACXvN,MAAO,CAAEwN,IAAM,SAAc1J,GAAqB9D,SAEjDc,GAAcyE,KAAI,CAACC,EAAGpE,IACrBqB,UAAAxC,cAAA,SAAAwN,EAAA,CACE/K,UAAW,EACX0K,IAAKhM,GACD2C,EAHN,CAIE7B,UAAWM,EACXxC,MAAO,CACL0N,gBAAiBlH,EAAcmH,SAASvM,GAAK,QAAU,cACvD0G,QACA8F,YAAc,SACX7J,GAAY/D,OAEjBmC,QAASA,EAAQ4B,GAAY5B,QAASf,EAAIwB,QAnBlD"}