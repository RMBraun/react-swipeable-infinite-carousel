{"version":3,"file":"index.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/components/Carousel.jsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { useState, useMemo, useRef, useCallback, useEffect, useLayoutEffect } from 'react'\nimport styles from './Carousel.module.css'\n\nconst getClientXOffset = (e) => e?.touches?.[0]?.clientX || e?.clientX || 0\n\nconst calculateAnchors = (slideRefs = [], gridGap = 0) =>\n  slideRefs.reduce((acc, ref, i) => {\n    if (ref?.current) {\n      const width = ref.current.clientWidth\n      const start = i === 0 ? 0 : acc[i - 1].end + gridGap\n      const end = start + width\n      acc.push({ start, end, width })\n    }\n    return acc\n  }, [])\n\nconst calcMinWidth = (slideAnchors, count) =>\n  slideAnchors?.length && count && count > 0\n    ? slideAnchors.reduce((acc, { start }, i) => {\n        const groupWidth = slideAnchors[Math.min(i + count - 1, slideAnchors.length - 1)].end - start\n\n        return groupWidth > acc ? groupWidth : acc\n      }, 0)\n    : 0\n\nconst ContainerCss = ({ displayCount, minDisplayCount, slideAnchors }) => {\n  const minWidth = calcMinWidth(slideAnchors, minDisplayCount)\n  const width = calcMinWidth(slideAnchors, displayCount)\n\n  return {\n    minWidth: minWidth ? `${minWidth}px` : 'auto',\n    width: width ? `${width}px` : '100%',\n  }\n}\n\nconst SlidesContainerCss = ({ gridGap, isScrolling, isDragging }) => ({\n  gap: `${gridGap}px`,\n  transition: `transform ${isScrolling || isDragging ? '0ms' : '500ms'}`,\n})\n\nconst Arrow = ({ isLeft, isHidden, style, onClick }) => {\n  return (\n    <button\n      className={`${styles.arrow} ${isLeft ? styles.leftArrow : styles.rightArrow} ${\n        isHidden ? styles.isArrowHidden : ''\n      }`}\n      style={style}\n      onClick={onClick}\n    >\n      <span className={`${styles.arrowIcon} ${isLeft ? styles.leftArrowIcon : styles.rightArrowIcon}`} />\n    </button>\n  )\n}\n\nexport const Carousel = ({\n  startIndex = 0,\n  minDisplayCount = 0,\n  displayCount = 0,\n  gridGap = 10,\n  showArrows = true,\n  renderArrows: RenderArrows = Arrow,\n  style = {},\n  slideContainerStyle = {},\n  slideStyle = {},\n  children,\n}) => {\n  const resizeObserverRef = useRef()\n  const slides = React.Children.toArray(children) || []\n  const slideCount = slides.length\n  const slidesRefs = useMemo(\n    () =>\n      Array(slideCount)\n        .fill(null)\n        .map((_, i) => slidesRefs?.[i] || React.createRef()),\n    [slideCount],\n  )\n  const [slideAnchors, setSlideAnchors] = useState([])\n  const containerRef = useRef(null)\n  const slideContainerRef = useRef(null)\n  const getTranslateOffset = useCallback(\n    (newIndex, newSlideAnchors = slideAnchors) => {\n      const start = newSlideAnchors?.[newIndex]?.start\n      return start != null ? -1 * start : 0\n    },\n\n    [slideAnchors],\n  )\n  const indexRef = useRef(startIndex)\n  const [index, setIndexState] = useState(startIndex)\n  const setIndex = useCallback(\n    (newIndex) => {\n      setIndexState(newIndex)\n      indexRef.current = newIndex\n    },\n    [setIndexState],\n  )\n  const [maxIndex, setMaxIndex] = useState(slideCount)\n  const [isDragging, setIsDragging] = useState(false)\n  const [isScrolling, setIsScrolling] = useState(false)\n  const translateOffset = useRef(getTranslateOffset(index))\n  const touchStartRef = useRef(0)\n  const touchEndRef = useRef(0)\n  const scrollDebounceId = useRef()\n  const maxScrollX = 0\n  const minScrollX = useMemo(() => {\n    const start = slideAnchors?.[maxIndex]?.start\n\n    return start != null ? -1 * start : 0\n  }, [slideAnchors, slideCount, maxIndex])\n  const showLeftArrow = index !== 0\n  const showRightArrow =\n    translateOffset.current != null && containerRef.current != null && slideAnchors?.[slideCount - 1] != null\n      ? -1 * translateOffset.current + containerRef.current.clientWidth < slideAnchors?.[slideCount - 1].end\n      : true\n\n  const getBoundIndex = useCallback(\n    (newIndex, newMaxIndex = maxIndex) => Math.max(0, Math.min(newMaxIndex, newIndex)),\n    [maxIndex],\n  )\n\n  const setTranslateOffset = useCallback((offset) => {\n    translateOffset.current = offset\n    requestAnimationFrame(() => {\n      if (slideContainerRef.current) {\n        slideContainerRef.current.style.transform = `translate(${offset}px)`\n      }\n    })\n  }, [])\n\n  const onResize = () => {\n    const newSlideAnchors = calculateAnchors(slidesRefs, gridGap)\n    const containerWidth = containerRef.current.clientWidth\n    const lastEnd = newSlideAnchors[newSlideAnchors.length - 1].end\n    const newMaxIndex = getBoundIndex(\n      newSlideAnchors.findIndex(({ start }) => start + containerWidth >= lastEnd),\n      newSlideAnchors.length - 1,\n    )\n    const newIndex = getBoundIndex(indexRef.current, newMaxIndex)\n    const newTranslateOffset = getTranslateOffset(newIndex, newSlideAnchors)\n\n    setIndex(newIndex)\n    setSlideAnchors(newSlideAnchors)\n    setMaxIndex(newMaxIndex)\n    setTranslateOffset(newTranslateOffset)\n  }\n\n  const getNewScrollState = useCallback(\n    (newIndex) => {\n      const newBoundIndex = getBoundIndex(newIndex)\n\n      const newBoundScrollDelta = getTranslateOffset(newBoundIndex)\n\n      return {\n        index: newBoundIndex,\n        translateOffset: newBoundScrollDelta,\n      }\n    },\n    [slideCount, getTranslateOffset, getBoundIndex],\n  )\n\n  useLayoutEffect(() => {\n    if (resizeObserverRef.current) {\n      resizeObserverRef.current.disconnect()\n    }\n\n    resizeObserverRef.current = new ResizeObserver(onResize)\n    slidesRefs.forEach(({ current }) => resizeObserverRef.current.observe(current))\n\n    onResize()\n  }, [slideCount, minDisplayCount, displayCount, gridGap])\n\n  useEffect(() => {\n    window.addEventListener('resize', onResize)\n\n    return () => {\n      if (resizeObserverRef.current) {\n        resizeObserverRef.current.disconnect()\n      }\n\n      window.removeEventListener('resize', onResize)\n    }\n  }, [])\n\n  const onArrowClick = useCallback(\n    (indexOffset) => (e) => {\n      e.preventDefault()\n      e.stopPropagation()\n\n      const newIndex = index + indexOffset\n      const newBoundIndex = getBoundIndex(newIndex)\n\n      setIndex(newBoundIndex)\n      setTranslateOffset(getTranslateOffset(newBoundIndex))\n    },\n    [index, slideCount, getTranslateOffset, setIndex, setTranslateOffset, getBoundIndex],\n  )\n\n  const onTouchStart = useCallback(\n    (e) => {\n      if (isScrolling || e.touches?.length > 1) {\n        return\n      }\n\n      setIsDragging(true)\n\n      const xOffset = getClientXOffset(e)\n      touchStartRef.current = xOffset\n      touchEndRef.current = xOffset\n    },\n    [isScrolling, setIsDragging],\n  )\n\n  const onTouchMove = useCallback(\n    (e) => {\n      e.stopPropagation()\n\n      if (!isDragging || isScrolling) {\n        return\n      }\n\n      touchEndRef.current = getClientXOffset(e)\n      const delta = touchStartRef.current - touchEndRef.current\n      touchStartRef.current = touchEndRef.current\n\n      if (delta !== 0) {\n        setTranslateOffset(translateOffset.current - delta)\n      }\n    },\n    [isScrolling, isDragging, index, setTranslateOffset],\n  )\n\n  const onTouchEnd = useCallback(\n    (e) => {\n      if (isScrolling || e.touches?.length > 0) {\n        return\n      }\n\n      const currentOffset = -1 * translateOffset.current\n\n      const newIndex = slideAnchors.reduce((acc, { start, width }, i) => {\n        return currentOffset >= start ? (currentOffset >= start + width / 2 ? i + 1 : i) : acc\n      }, 0)\n\n      const newBoundIndex = getBoundIndex(newIndex)\n\n      setIndex(newBoundIndex)\n      setTranslateOffset(getTranslateOffset(newBoundIndex))\n\n      touchStartRef.current = 0\n      touchEndRef.current = 0\n\n      setIsDragging(false)\n    },\n    [isScrolling, slideAnchors, setTranslateOffset, getTranslateOffset, setIndex, getBoundIndex, setIsDragging],\n  )\n\n  const onScroll = useCallback(\n    (e) => {\n      if (isDragging) {\n        return\n      }\n\n      const isWheel = e.deltaX === 0 && Math.abs(e.deltaY) > 0\n      const scrollDelta = isWheel ? -1 * e.deltaY : e.deltaX\n      const scrollDirection = Math.sign(scrollDelta)\n\n      if (\n        (translateOffset.current >= maxScrollX && scrollDirection === -1) ||\n        (translateOffset.current <= minScrollX && scrollDirection === 1)\n      ) {\n        return\n      }\n\n      if (!isScrolling && !isWheel) {\n        setIsScrolling(true)\n      }\n\n      const newScrollDelta = translateOffset.current - scrollDirection * Math.min(75, Math.abs(scrollDelta))\n\n      const debounceFunc = () => {\n        setIsScrolling(false)\n\n        const currentOffset = -1 * newScrollDelta\n\n        const newIndex = slideAnchors.reduce((acc, { start, width }, i) => {\n          return currentOffset >= start ? (currentOffset >= start + width / 2 ? i + 1 : i) : acc\n        }, 0)\n\n        const newBoundIndex = getBoundIndex(newIndex)\n\n        setIndex(newBoundIndex)\n        setTranslateOffset(getTranslateOffset(newBoundIndex))\n      }\n\n      if (scrollDebounceId.current) {\n        clearTimeout(scrollDebounceId.current)\n      }\n\n      if (newScrollDelta >= maxScrollX) {\n        setTranslateOffset(maxScrollX)\n        debounceFunc()\n      } else if (newScrollDelta <= minScrollX) {\n        setTranslateOffset(minScrollX)\n        debounceFunc()\n      } else {\n        setTranslateOffset(newScrollDelta)\n\n        scrollDebounceId.current = setTimeout(debounceFunc, 100)\n      }\n    },\n    [\n      slideAnchors,\n      gridGap,\n      isScrolling,\n      minScrollX,\n      translateOffset,\n      isDragging,\n      setIsScrolling,\n      setIndex,\n      setTranslateOffset,\n      getNewScrollState,\n    ],\n  )\n\n  const slideContainerCss = useMemo(\n    () =>\n      SlidesContainerCss({\n        gridGap,\n        isScrolling,\n        isDragging,\n      }),\n    [gridGap, isScrolling, isDragging],\n  )\n\n  return (\n    <div\n      className={styles.container}\n      style={{\n        ...ContainerCss({\n          minDisplayCount,\n          displayCount,\n          slideAnchors,\n        }),\n        ...style,\n      }}\n      ref={containerRef}\n    >\n      {showArrows && (\n        <RenderArrows\n          isLeft={true}\n          isRight={false}\n          isHidden={isScrolling || isDragging || !showLeftArrow}\n          onClick={showLeftArrow ? onArrowClick(-1) : undefined}\n        />\n      )}\n      <div\n        ref={slideContainerRef}\n        className={styles.slideContainer}\n        style={{\n          ...slideContainerCss,\n          ...slideContainerStyle,\n        }}\n        onTouchStart={onTouchStart}\n        onTouchMove={onTouchMove}\n        onTouchEnd={onTouchEnd}\n        onTouchCancel={onTouchEnd}\n        onMouseDown={onTouchStart}\n        onMouseMove={onTouchMove}\n        onMouseUp={onTouchEnd}\n        onMouseLeave={onTouchEnd}\n        onWheel={onScroll}\n      >\n        {slides.map((slide, i) => (\n          <div style={slideStyle} ref={slidesRefs[i]} key={i}>\n            {slide}\n          </div>\n        ))}\n      </div>\n      {showArrows && (\n        <RenderArrows\n          isLeft={false}\n          isRight={true}\n          isHidden={isScrolling || isDragging || !showRightArrow}\n          onClick={showRightArrow ? onArrowClick(1) : undefined}\n        />\n      )}\n    </div>\n  )\n}\n"],"names":["css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","getClientXOffset","e","touches","clientX","calcMinWidth","slideAnchors","count","length","reduce","acc","start","i","groupWidth","Math","min","end","ContainerCss","displayCount","minDisplayCount","minWidth","width","Arrow","isLeft","isHidden","onClick","React","className","styles","startIndex","gridGap","showArrows","renderArrows","RenderArrows","slideContainerStyle","slideStyle","children","resizeObserverRef","useRef","slides","Children","toArray","slideCount","slidesRefs","useMemo","Array","fill","map","_","createRef","setSlideAnchors","useState","containerRef","slideContainerRef","getTranslateOffset","useCallback","newIndex","newSlideAnchors","indexRef","index","setIndexState","setIndex","current","maxIndex","setMaxIndex","isDragging","setIsDragging","isScrolling","setIsScrolling","translateOffset","touchStartRef","touchEndRef","scrollDebounceId","minScrollX","showLeftArrow","showRightArrow","clientWidth","getBoundIndex","newMaxIndex","max","setTranslateOffset","offset","requestAnimationFrame","transform","onResize","slideRefs","push","calculateAnchors","containerWidth","lastEnd","findIndex","newTranslateOffset","getNewScrollState","newBoundIndex","useLayoutEffect","disconnect","ResizeObserver","forEach","observe","useEffect","window","addEventListener","removeEventListener","onArrowClick","indexOffset","preventDefault","stopPropagation","onTouchStart","xOffset","onTouchMove","delta","onTouchEnd","currentOffset","onScroll","isWheel","deltaX","abs","deltaY","scrollDelta","scrollDirection","sign","newScrollDelta","debounceFunc","clearTimeout","setTimeout","slideContainerCss","gap","transition","SlidesContainerCss","isRight","undefined","onTouchCancel","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onWheel","slide","key"],"mappings":"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"}